
LAB5_UART_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003220  08003220  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003220  08003220  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003220  08003220  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08003298  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003298  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f02  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbf  00000000  00000000  00027f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  00029b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b8  00000000  00000000  0002a3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177d8  00000000  00000000  0002ab98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a19  00000000  00000000  00042370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008520a  00000000  00000000  0004bd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0f93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024ec  00000000  00000000  000d0fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080031a4 	.word	0x080031a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080031a4 	.word	0x080031a4

0800014c <isCmdEqualToRST>:
		else flag = 1;
	}
	return flag;
}

int isCmdEqualToRST(uint8_t *buffer, int size){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	int flag = 0;
 8000156:	2300      	movs	r3, #0
 8000158:	60fb      	str	r3, [r7, #12]
	if (buffer[0] == '!' && buffer[1] == 'R' && buffer[2] == 'S' && buffer[3] == 'T' && buffer[4] == '#')
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	781b      	ldrb	r3, [r3, #0]
 800015e:	2b21      	cmp	r3, #33	; 0x21
 8000160:	d116      	bne.n	8000190 <isCmdEqualToRST+0x44>
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	3301      	adds	r3, #1
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b52      	cmp	r3, #82	; 0x52
 800016a:	d111      	bne.n	8000190 <isCmdEqualToRST+0x44>
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	3302      	adds	r3, #2
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	2b53      	cmp	r3, #83	; 0x53
 8000174:	d10c      	bne.n	8000190 <isCmdEqualToRST+0x44>
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3303      	adds	r3, #3
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b54      	cmp	r3, #84	; 0x54
 800017e:	d107      	bne.n	8000190 <isCmdEqualToRST+0x44>
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	3304      	adds	r3, #4
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	2b23      	cmp	r3, #35	; 0x23
 8000188:	d102      	bne.n	8000190 <isCmdEqualToRST+0x44>
		flag = 1;
 800018a:	2301      	movs	r3, #1
 800018c:	60fb      	str	r3, [r7, #12]
 800018e:	e001      	b.n	8000194 <isCmdEqualToRST+0x48>
	else
		flag = 0;
 8000190:	2300      	movs	r3, #0
 8000192:	60fb      	str	r3, [r7, #12]
	return flag;
 8000194:	68fb      	ldr	r3, [r7, #12]
}
 8000196:	4618      	mov	r0, r3
 8000198:	3714      	adds	r7, #20
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <isCmdEqualToOK>:

int isCmdEqualToOK(uint8_t *buffer, int size){
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	6039      	str	r1, [r7, #0]
	int flag = 0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	60fb      	str	r3, [r7, #12]
	if (buffer[0] == '!' && buffer[1] == 'O' && buffer[2] == 'K' && buffer[3] == '#')
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	2b21      	cmp	r3, #33	; 0x21
 80001b4:	d111      	bne.n	80001da <isCmdEqualToOK+0x3a>
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	3301      	adds	r3, #1
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	2b4f      	cmp	r3, #79	; 0x4f
 80001be:	d10c      	bne.n	80001da <isCmdEqualToOK+0x3a>
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	3302      	adds	r3, #2
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	2b4b      	cmp	r3, #75	; 0x4b
 80001c8:	d107      	bne.n	80001da <isCmdEqualToOK+0x3a>
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	3303      	adds	r3, #3
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	2b23      	cmp	r3, #35	; 0x23
 80001d2:	d102      	bne.n	80001da <isCmdEqualToOK+0x3a>
		flag = 1;
 80001d4:	2301      	movs	r3, #1
 80001d6:	60fb      	str	r3, [r7, #12]
 80001d8:	e001      	b.n	80001de <isCmdEqualToOK+0x3e>
	else
		flag = 0;
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
	return flag;
 80001de:	68fb      	ldr	r3, [r7, #12]
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	3714      	adds	r7, #20
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
	...

080001ec <cmd_parser_fsm>:

void cmd_parser_fsm(uint8_t *buffer, int size){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
	switch(status){
 80001f6:	4b27      	ldr	r3, [pc, #156]	; (8000294 <cmd_parser_fsm+0xa8>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b02      	cmp	r3, #2
 80001fc:	d032      	beq.n	8000264 <cmd_parser_fsm+0x78>
 80001fe:	2b02      	cmp	r3, #2
 8000200:	dc42      	bgt.n	8000288 <cmd_parser_fsm+0x9c>
 8000202:	2b00      	cmp	r3, #0
 8000204:	d002      	beq.n	800020c <cmd_parser_fsm+0x20>
 8000206:	2b01      	cmp	r3, #1
 8000208:	d01a      	beq.n	8000240 <cmd_parser_fsm+0x54>
			cmd_flag = END;
			if (isCmdEqualToRST(buffer, size) == 1) status = READ;
			else status = INIT;
			break;
		default:
			break;
 800020a:	e03d      	b.n	8000288 <cmd_parser_fsm+0x9c>
			if (isCmdEqualToRST(buffer, size) == 1) status = READ;
 800020c:	6839      	ldr	r1, [r7, #0]
 800020e:	6878      	ldr	r0, [r7, #4]
 8000210:	f7ff ff9c 	bl	800014c <isCmdEqualToRST>
 8000214:	4603      	mov	r3, r0
 8000216:	2b01      	cmp	r3, #1
 8000218:	d103      	bne.n	8000222 <cmd_parser_fsm+0x36>
 800021a:	4b1e      	ldr	r3, [pc, #120]	; (8000294 <cmd_parser_fsm+0xa8>)
 800021c:	2201      	movs	r2, #1
 800021e:	601a      	str	r2, [r3, #0]
			break;
 8000220:	e033      	b.n	800028a <cmd_parser_fsm+0x9e>
			else if (isCmdEqualToOK(buffer, size) == 1) status = END;
 8000222:	6839      	ldr	r1, [r7, #0]
 8000224:	6878      	ldr	r0, [r7, #4]
 8000226:	f7ff ffbb 	bl	80001a0 <isCmdEqualToOK>
 800022a:	4603      	mov	r3, r0
 800022c:	2b01      	cmp	r3, #1
 800022e:	d103      	bne.n	8000238 <cmd_parser_fsm+0x4c>
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <cmd_parser_fsm+0xa8>)
 8000232:	2202      	movs	r2, #2
 8000234:	601a      	str	r2, [r3, #0]
			break;
 8000236:	e028      	b.n	800028a <cmd_parser_fsm+0x9e>
			else status = INIT;
 8000238:	4b16      	ldr	r3, [pc, #88]	; (8000294 <cmd_parser_fsm+0xa8>)
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
			break;
 800023e:	e024      	b.n	800028a <cmd_parser_fsm+0x9e>
			cmd_flag = READ;
 8000240:	4b15      	ldr	r3, [pc, #84]	; (8000298 <cmd_parser_fsm+0xac>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
			if (isCmdEqualToOK(buffer, size) == 1) status = END;
 8000246:	6839      	ldr	r1, [r7, #0]
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ffa9 	bl	80001a0 <isCmdEqualToOK>
 800024e:	4603      	mov	r3, r0
 8000250:	2b01      	cmp	r3, #1
 8000252:	d103      	bne.n	800025c <cmd_parser_fsm+0x70>
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <cmd_parser_fsm+0xa8>)
 8000256:	2202      	movs	r2, #2
 8000258:	601a      	str	r2, [r3, #0]
			break;
 800025a:	e016      	b.n	800028a <cmd_parser_fsm+0x9e>
			else status = INIT;
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <cmd_parser_fsm+0xa8>)
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
			break;
 8000262:	e012      	b.n	800028a <cmd_parser_fsm+0x9e>
			cmd_flag = END;
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <cmd_parser_fsm+0xac>)
 8000266:	2202      	movs	r2, #2
 8000268:	701a      	strb	r2, [r3, #0]
			if (isCmdEqualToRST(buffer, size) == 1) status = READ;
 800026a:	6839      	ldr	r1, [r7, #0]
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f7ff ff6d 	bl	800014c <isCmdEqualToRST>
 8000272:	4603      	mov	r3, r0
 8000274:	2b01      	cmp	r3, #1
 8000276:	d103      	bne.n	8000280 <cmd_parser_fsm+0x94>
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <cmd_parser_fsm+0xa8>)
 800027a:	2201      	movs	r2, #1
 800027c:	601a      	str	r2, [r3, #0]
			break;
 800027e:	e004      	b.n	800028a <cmd_parser_fsm+0x9e>
			else status = INIT;
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <cmd_parser_fsm+0xa8>)
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
			break;
 8000286:	e000      	b.n	800028a <cmd_parser_fsm+0x9e>
			break;
 8000288:	bf00      	nop
	}
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000090 	.word	0x20000090
 8000298:	2000008c 	.word	0x2000008c

0800029c <uart_comms_fsm>:

void uart_comms_fsm(){
 800029c:	b580      	push	{r7, lr}
 800029e:	b08e      	sub	sp, #56	; 0x38
 80002a0:	af00      	add	r7, sp, #0
	char str[50];
	switch(cmd_flag){
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <uart_comms_fsm+0x48>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d002      	beq.n	80002b0 <uart_comms_fsm+0x14>
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	d015      	beq.n	80002da <uart_comms_fsm+0x3e>
		    HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "%ld\r\n",ADC_value), 100);
		    break;
		case END:
			return;
		default:
			break;
 80002ae:	e015      	b.n	80002dc <uart_comms_fsm+0x40>
		    ADC_value = HAL_ADC_GetValue(&hadc1);
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <uart_comms_fsm+0x4c>)
 80002b2:	f000 fc11 	bl	8000ad8 <HAL_ADC_GetValue>
 80002b6:	4603      	mov	r3, r0
 80002b8:	4a0c      	ldr	r2, [pc, #48]	; (80002ec <uart_comms_fsm+0x50>)
 80002ba:	6013      	str	r3, [r2, #0]
		    HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "%ld\r\n",ADC_value), 100);
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <uart_comms_fsm+0x50>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	490b      	ldr	r1, [pc, #44]	; (80002f0 <uart_comms_fsm+0x54>)
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 faf3 	bl	80028b0 <siprintf>
 80002ca:	4603      	mov	r3, r0
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	1d39      	adds	r1, r7, #4
 80002d0:	2364      	movs	r3, #100	; 0x64
 80002d2:	4808      	ldr	r0, [pc, #32]	; (80002f4 <uart_comms_fsm+0x58>)
 80002d4:	f001 fdcf 	bl	8001e76 <HAL_UART_Transmit>
		    break;
 80002d8:	e000      	b.n	80002dc <uart_comms_fsm+0x40>
			return;
 80002da:	bf00      	nop
	}
}
 80002dc:	3738      	adds	r7, #56	; 0x38
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2000008c 	.word	0x2000008c
 80002e8:	20000098 	.word	0x20000098
 80002ec:	20000094 	.word	0x20000094
 80002f0:	080031bc 	.word	0x080031bc
 80002f4:	200000c8 	.word	0x200000c8

080002f8 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a10      	ldr	r2, [pc, #64]	; (8000348 <HAL_UART_RxCpltCallback+0x50>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d119      	bne.n	800033e <HAL_UART_RxCpltCallback+0x46>
//		HAL_UART_Transmit(&huart2, &temp, 1, 50);
		buffer[index_buffer++] = temp;
 800030a:	4b10      	ldr	r3, [pc, #64]	; (800034c <HAL_UART_RxCpltCallback+0x54>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	1c5a      	adds	r2, r3, #1
 8000310:	b2d1      	uxtb	r1, r2
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <HAL_UART_RxCpltCallback+0x54>)
 8000314:	7011      	strb	r1, [r2, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <HAL_UART_RxCpltCallback+0x58>)
 800031a:	7819      	ldrb	r1, [r3, #0]
 800031c:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <HAL_UART_RxCpltCallback+0x5c>)
 800031e:	5499      	strb	r1, [r3, r2]
		if (index_buffer == MAX_BUFFER_SIZE) index_buffer = 0;
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <HAL_UART_RxCpltCallback+0x54>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b64      	cmp	r3, #100	; 0x64
 8000326:	d102      	bne.n	800032e <HAL_UART_RxCpltCallback+0x36>
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <HAL_UART_RxCpltCallback+0x54>)
 800032a:	2200      	movs	r2, #0
 800032c:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 800032e:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <HAL_UART_RxCpltCallback+0x60>)
 8000330:	2201      	movs	r2, #1
 8000332:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000334:	2201      	movs	r2, #1
 8000336:	4906      	ldr	r1, [pc, #24]	; (8000350 <HAL_UART_RxCpltCallback+0x58>)
 8000338:	4808      	ldr	r0, [pc, #32]	; (800035c <HAL_UART_RxCpltCallback+0x64>)
 800033a:	f001 fe2e 	bl	8001f9a <HAL_UART_Receive_IT>
	}
}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40004400 	.word	0x40004400
 800034c:	20000174 	.word	0x20000174
 8000350:	2000010c 	.word	0x2000010c
 8000354:	20000110 	.word	0x20000110
 8000358:	20000175 	.word	0x20000175
 800035c:	200000c8 	.word	0x200000c8

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000364:	f000 fa7e 	bl	8000864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000368:	f000 f834 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036c:	f000 f8ea 	bl	8000544 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000370:	f000 f880 	bl	8000474 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000374:	f000 f8bc 	bl	80004f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000378:	2201      	movs	r2, #1
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <main+0x5c>)
 800037c:	4810      	ldr	r0, [pc, #64]	; (80003c0 <main+0x60>)
 800037e:	f001 fe0c 	bl	8001f9a <HAL_UART_Receive_IT>

  // Generate ADC value
//  uint32_t ADC_value = 0;
//  char str[50];
  setTimer1(50);
 8000382:	2032      	movs	r0, #50	; 0x32
 8000384:	f000 f916 	bl	80005b4 <setTimer1>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (timer1_flag == 1){
 8000388:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <main+0x64>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d106      	bne.n	800039e <main+0x3e>
		  HAL_GPIO_TogglePin(RED_GPIO_Port, RED_Pin);
 8000390:	2120      	movs	r1, #32
 8000392:	480d      	ldr	r0, [pc, #52]	; (80003c8 <main+0x68>)
 8000394:	f001 f838 	bl	8001408 <HAL_GPIO_TogglePin>
		  setTimer1(50);
 8000398:	2032      	movs	r0, #50	; 0x32
 800039a:	f000 f90b 	bl	80005b4 <setTimer1>
	  }
	  if (buffer_flag == 1){
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <main+0x6c>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d106      	bne.n	80003b4 <main+0x54>
		  cmd_parser_fsm(&buffer, sizeof(buffer));
 80003a6:	2164      	movs	r1, #100	; 0x64
 80003a8:	4809      	ldr	r0, [pc, #36]	; (80003d0 <main+0x70>)
 80003aa:	f7ff ff1f 	bl	80001ec <cmd_parser_fsm>
		  buffer_flag = 0;
 80003ae:	4b07      	ldr	r3, [pc, #28]	; (80003cc <main+0x6c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
	  }
	  uart_comms_fsm();
 80003b4:	f7ff ff72 	bl	800029c <uart_comms_fsm>
	  if (timer1_flag == 1){
 80003b8:	e7e6      	b.n	8000388 <main+0x28>
 80003ba:	bf00      	nop
 80003bc:	2000010c 	.word	0x2000010c
 80003c0:	200000c8 	.word	0x200000c8
 80003c4:	2000017c 	.word	0x2000017c
 80003c8:	40010800 	.word	0x40010800
 80003cc:	20000175 	.word	0x20000175
 80003d0:	20000110 	.word	0x20000110

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b094      	sub	sp, #80	; 0x50
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003de:	2228      	movs	r2, #40	; 0x28
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f002 fa5c 	bl	80028a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000404:	2302      	movs	r3, #2
 8000406:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000408:	2301      	movs	r3, #1
 800040a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800040c:	2310      	movs	r3, #16
 800040e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000410:	2300      	movs	r3, #0
 8000412:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000414:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000418:	4618      	mov	r0, r3
 800041a:	f001 f80f 	bl	800143c <HAL_RCC_OscConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000424:	f000 f8c0 	bl	80005a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000428:	230f      	movs	r3, #15
 800042a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f001 fa7c 	bl	8001940 <HAL_RCC_ClockConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800044e:	f000 f8ab 	bl	80005a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000452:	2302      	movs	r3, #2
 8000454:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	4618      	mov	r0, r3
 800045e:	f001 fc07 	bl	8001c70 <HAL_RCCEx_PeriphCLKConfig>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000468:	f000 f89e 	bl	80005a8 <Error_Handler>
  }
}
 800046c:	bf00      	nop
 800046e:	3750      	adds	r7, #80	; 0x50
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_ADC1_Init+0x74>)
 8000486:	4a19      	ldr	r2, [pc, #100]	; (80004ec <MX_ADC1_Init+0x78>)
 8000488:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <MX_ADC1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <MX_ADC1_Init+0x74>)
 8000492:	2201      	movs	r2, #1
 8000494:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000496:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <MX_ADC1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <MX_ADC1_Init+0x74>)
 800049e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <MX_ADC1_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_ADC1_Init+0x74>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004b0:	480d      	ldr	r0, [pc, #52]	; (80004e8 <MX_ADC1_Init+0x74>)
 80004b2:	f000 fa39 	bl	8000928 <HAL_ADC_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80004bc:	f000 f874 	bl	80005a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004c4:	2301      	movs	r3, #1
 80004c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	4619      	mov	r1, r3
 80004d0:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_ADC1_Init+0x74>)
 80004d2:	f000 fb0d 	bl	8000af0 <HAL_ADC_ConfigChannel>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80004dc:	f000 f864 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004e0:	bf00      	nop
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000098 	.word	0x20000098
 80004ec:	40012400 	.word	0x40012400

080004f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_USART2_UART_Init+0x4c>)
 80004f6:	4a12      	ldr	r2, [pc, #72]	; (8000540 <MX_USART2_UART_Init+0x50>)
 80004f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <MX_USART2_UART_Init+0x4c>)
 80004fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_USART2_UART_Init+0x4c>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000516:	220c      	movs	r2, #12
 8000518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_USART2_UART_Init+0x4c>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000528:	f001 fc58 	bl	8001ddc <HAL_UART_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000532:	f000 f839 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	200000c8 	.word	0x200000c8
 8000540:	40004400 	.word	0x40004400

08000544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_GPIO_Init+0x5c>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <MX_GPIO_Init+0x5c>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_GPIO_Init+0x5c>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2120      	movs	r1, #32
 8000574:	480b      	ldr	r0, [pc, #44]	; (80005a4 <MX_GPIO_Init+0x60>)
 8000576:	f000 ff2f 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_Pin */
  GPIO_InitStruct.Pin = RED_Pin;
 800057a:	2320      	movs	r3, #32
 800057c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057e:	2301      	movs	r3, #1
 8000580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	2302      	movs	r3, #2
 8000588:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RED_GPIO_Port, &GPIO_InitStruct);
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	4619      	mov	r1, r3
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <MX_GPIO_Init+0x60>)
 8000592:	f000 fda5 	bl	80010e0 <HAL_GPIO_Init>

}
 8000596:	bf00      	nop
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010800 	.word	0x40010800

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
}
 80005ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <Error_Handler+0x8>
	...

080005b4 <setTimer1>:
int timer9_flag = 0;

int timer10_counter = 0;
int timer10_flag = 0;

void setTimer1(int duration){
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80005bc:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <setTimer1+0x20>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <setTimer1+0x24>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000178 	.word	0x20000178
 80005d8:	2000017c 	.word	0x2000017c

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <HAL_MspInit+0x40>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a0d      	ldr	r2, [pc, #52]	; (800061c <HAL_MspInit+0x40>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <HAL_MspInit+0x40>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <HAL_MspInit+0x40>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_MspInit+0x40>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_MspInit+0x40>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <HAL_ADC_MspInit+0x6c>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d121      	bne.n	8000684 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <HAL_ADC_MspInit+0x70>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a12      	ldr	r2, [pc, #72]	; (8000690 <HAL_ADC_MspInit+0x70>)
 8000646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <HAL_ADC_MspInit+0x70>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <HAL_ADC_MspInit+0x70>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <HAL_ADC_MspInit+0x70>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_ADC_MspInit+0x70>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000670:	2301      	movs	r3, #1
 8000672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000674:	2303      	movs	r3, #3
 8000676:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4619      	mov	r1, r3
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <HAL_ADC_MspInit+0x74>)
 8000680:	f000 fd2e 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40012400 	.word	0x40012400
 8000690:	40021000 	.word	0x40021000
 8000694:	40010800 	.word	0x40010800

08000698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <HAL_UART_MspInit+0x98>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d137      	bne.n	8000728 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <HAL_UART_MspInit+0x9c>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <HAL_UART_MspInit+0x9c>)
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c2:	61d3      	str	r3, [r2, #28]
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <HAL_UART_MspInit+0x9c>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <HAL_UART_MspInit+0x9c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a17      	ldr	r2, [pc, #92]	; (8000734 <HAL_UART_MspInit+0x9c>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <HAL_UART_MspInit+0x9c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006e8:	2304      	movs	r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	480f      	ldr	r0, [pc, #60]	; (8000738 <HAL_UART_MspInit+0xa0>)
 80006fc:	f000 fcf0 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000700:	2308      	movs	r3, #8
 8000702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <HAL_UART_MspInit+0xa0>)
 8000714:	f000 fce4 	bl	80010e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	2026      	movs	r0, #38	; 0x26
 800071e:	f000 fbf8 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000722:	2026      	movs	r0, #38	; 0x26
 8000724:	f000 fc11 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40004400 	.word	0x40004400
 8000734:	40021000 	.word	0x40021000
 8000738:	40010800 	.word	0x40010800

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <NMI_Handler+0x4>

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler+0x4>

0800074e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <UsageFault_Handler+0x4>

0800075a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000782:	f000 f8b5 	bl	80008f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <USART2_IRQHandler+0x10>)
 8000792:	f001 fc33 	bl	8001ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000c8 	.word	0x200000c8

080007a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a8:	4a14      	ldr	r2, [pc, #80]	; (80007fc <_sbrk+0x5c>)
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <_sbrk+0x60>)
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <_sbrk+0x64>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <_sbrk+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d207      	bcs.n	80007e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d0:	f002 f83c 	bl	800284c <__errno>
 80007d4:	4603      	mov	r3, r0
 80007d6:	220c      	movs	r2, #12
 80007d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	e009      	b.n	80007f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <_sbrk+0x64>)
 80007f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20002800 	.word	0x20002800
 8000800:	00000400 	.word	0x00000400
 8000804:	20000180 	.word	0x20000180
 8000808:	20000198 	.word	0x20000198

0800080c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800081a:	490d      	ldr	r1, [pc, #52]	; (8000850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000830:	4c0a      	ldr	r4, [pc, #40]	; (800085c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800083e:	f7ff ffe5 	bl	800080c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f002 f809 	bl	8002858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fd8b 	bl	8000360 <main>
  bx lr
 800084a:	4770      	bx	lr
  ldr r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000850:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000854:	08003228 	.word	0x08003228
  ldr r2, =_sbss
 8000858:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800085c:	20000198 	.word	0x20000198

08000860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_2_IRQHandler>
	...

08000864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_Init+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_Init+0x28>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 fb41 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	200f      	movs	r0, #15
 800087c:	f000 f808 	bl	8000890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000880:	f7ff feac 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40022000 	.word	0x40022000

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x54>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x58>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fb59 	bl	8000f66 <HAL_SYSTICK_Config>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00e      	b.n	80008dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d80a      	bhi.n	80008da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 fb21 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	4a06      	ldr	r2, [pc, #24]	; (80008ec <HAL_InitTick+0x5c>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000004 	.word	0x20000004

080008f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_IncTick+0x1c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_IncTick+0x20>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a03      	ldr	r2, [pc, #12]	; (8000910 <HAL_IncTick+0x20>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	20000008 	.word	0x20000008
 8000910:	20000184 	.word	0x20000184

08000914 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;
 8000918:	4b02      	ldr	r3, [pc, #8]	; (8000924 <HAL_GetTick+0x10>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	20000184 	.word	0x20000184

08000928 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000930:	2300      	movs	r3, #0
 8000932:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d101      	bne.n	800094a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e0be      	b.n	8000ac8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000954:	2b00      	cmp	r3, #0
 8000956:	d109      	bne.n	800096c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fe5a 	bl	8000620 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 f9b7 	bl	8000ce0 <ADC_ConversionStop_Disable>
 8000972:	4603      	mov	r3, r0
 8000974:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	2b00      	cmp	r3, #0
 8000980:	f040 8099 	bne.w	8000ab6 <HAL_ADC_Init+0x18e>
 8000984:	7dfb      	ldrb	r3, [r7, #23]
 8000986:	2b00      	cmp	r3, #0
 8000988:	f040 8095 	bne.w	8000ab6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000990:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000994:	f023 0302 	bic.w	r3, r3, #2
 8000998:	f043 0202 	orr.w	r2, r3, #2
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	7b1b      	ldrb	r3, [r3, #12]
 80009ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009c0:	d003      	beq.n	80009ca <HAL_ADC_Init+0xa2>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d102      	bne.n	80009d0 <HAL_ADC_Init+0xa8>
 80009ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ce:	e000      	b.n	80009d2 <HAL_ADC_Init+0xaa>
 80009d0:	2300      	movs	r3, #0
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7d1b      	ldrb	r3, [r3, #20]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d119      	bne.n	8000a14 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7b1b      	ldrb	r3, [r3, #12]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d109      	bne.n	80009fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	035a      	lsls	r2, r3, #13
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	e00b      	b.n	8000a14 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a00:	f043 0220 	orr.w	r2, r3, #32
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0c:	f043 0201 	orr.w	r2, r3, #1
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	430a      	orrs	r2, r1
 8000a26:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <HAL_ADC_Init+0x1a8>)
 8000a30:	4013      	ands	r3, r2
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	6812      	ldr	r2, [r2, #0]
 8000a36:	68b9      	ldr	r1, [r7, #8]
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a44:	d003      	beq.n	8000a4e <HAL_ADC_Init+0x126>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d104      	bne.n	8000a58 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	691b      	ldr	r3, [r3, #16]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	051b      	lsls	r3, r3, #20
 8000a56:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_ADC_Init+0x1ac>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d10b      	bne.n	8000a94 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a86:	f023 0303 	bic.w	r3, r3, #3
 8000a8a:	f043 0201 	orr.w	r2, r3, #1
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a92:	e018      	b.n	8000ac6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a98:	f023 0312 	bic.w	r3, r3, #18
 8000a9c:	f043 0210 	orr.w	r2, r3, #16
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa8:	f043 0201 	orr.w	r2, r3, #1
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ab4:	e007      	b.n	8000ac6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aba:	f043 0210 	orr.w	r2, r3, #16
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ad4:	ff1f0efe 	.word	0xff1f0efe

08000ad8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d101      	bne.n	8000b10 <HAL_ADC_ConfigChannel+0x20>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e0dc      	b.n	8000cca <HAL_ADC_ConfigChannel+0x1da>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b06      	cmp	r3, #6
 8000b1e:	d81c      	bhi.n	8000b5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	3b05      	subs	r3, #5
 8000b32:	221f      	movs	r2, #31
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	4019      	ands	r1, r3
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	4613      	mov	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	3b05      	subs	r3, #5
 8000b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	430a      	orrs	r2, r1
 8000b56:	635a      	str	r2, [r3, #52]	; 0x34
 8000b58:	e03c      	b.n	8000bd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2b0c      	cmp	r3, #12
 8000b60:	d81c      	bhi.n	8000b9c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	3b23      	subs	r3, #35	; 0x23
 8000b74:	221f      	movs	r2, #31
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	4019      	ands	r1, r3
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	6818      	ldr	r0, [r3, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	3b23      	subs	r3, #35	; 0x23
 8000b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	430a      	orrs	r2, r1
 8000b98:	631a      	str	r2, [r3, #48]	; 0x30
 8000b9a:	e01b      	b.n	8000bd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	3b41      	subs	r3, #65	; 0x41
 8000bae:	221f      	movs	r2, #31
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	4019      	ands	r1, r3
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	3b41      	subs	r3, #65	; 0x41
 8000bc8:	fa00 f203 	lsl.w	r2, r0, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b09      	cmp	r3, #9
 8000bda:	d91c      	bls.n	8000c16 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68d9      	ldr	r1, [r3, #12]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	3b1e      	subs	r3, #30
 8000bee:	2207      	movs	r2, #7
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	4019      	ands	r1, r3
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	6898      	ldr	r0, [r3, #8]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4613      	mov	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4413      	add	r3, r2
 8000c06:	3b1e      	subs	r3, #30
 8000c08:	fa00 f203 	lsl.w	r2, r0, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	e019      	b.n	8000c4a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6919      	ldr	r1, [r3, #16]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	2207      	movs	r2, #7
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	4019      	ands	r1, r3
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	6898      	ldr	r0, [r3, #8]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	430a      	orrs	r2, r1
 8000c48:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b10      	cmp	r3, #16
 8000c50:	d003      	beq.n	8000c5a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c56:	2b11      	cmp	r3, #17
 8000c58:	d132      	bne.n	8000cc0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d125      	bne.n	8000cb0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d126      	bne.n	8000cc0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000c80:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b10      	cmp	r3, #16
 8000c88:	d11a      	bne.n	8000cc0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_ADC_ConfigChannel+0x1ec>)
 8000c90:	fba2 2303 	umull	r2, r3, r2, r3
 8000c94:	0c9a      	lsrs	r2, r3, #18
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ca0:	e002      	b.n	8000ca8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f9      	bne.n	8000ca2 <HAL_ADC_ConfigChannel+0x1b2>
 8000cae:	e007      	b.n	8000cc0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb4:	f043 0220 	orr.w	r2, r3, #32
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40012400 	.word	0x40012400
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	431bde83 	.word	0x431bde83

08000ce0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d12e      	bne.n	8000d58 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 0201 	bic.w	r2, r2, #1
 8000d08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d0a:	f7ff fe03 	bl	8000914 <HAL_GetTick>
 8000d0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d10:	e01b      	b.n	8000d4a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d12:	f7ff fdff 	bl	8000914 <HAL_GetTick>
 8000d16:	4602      	mov	r2, r0
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d914      	bls.n	8000d4a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d10d      	bne.n	8000d4a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d32:	f043 0210 	orr.w	r2, r3, #16
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	f043 0201 	orr.w	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e007      	b.n	8000d5a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d0dc      	beq.n	8000d12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4906      	ldr	r1, [pc, #24]	; (8000dfc <__NVIC_EnableIRQ+0x34>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff90 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff2d 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff42 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff90 	bl	8000e54 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5f 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff35 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa2 	bl	8000eb8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d008      	beq.n	8000fa6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2204      	movs	r2, #4
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e020      	b.n	8000fe8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 020e 	bic.w	r2, r2, #14
 8000fb4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0201 	bic.w	r2, r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fce:	2101      	movs	r1, #1
 8000fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
	...

08000ff4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001006:	2b02      	cmp	r3, #2
 8001008:	d005      	beq.n	8001016 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2204      	movs	r2, #4
 800100e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e051      	b.n	80010ba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 020e 	bic.w	r2, r2, #14
 8001024:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <HAL_DMA_Abort_IT+0xd0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d029      	beq.n	8001094 <HAL_DMA_Abort_IT+0xa0>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a20      	ldr	r2, [pc, #128]	; (80010c8 <HAL_DMA_Abort_IT+0xd4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d022      	beq.n	8001090 <HAL_DMA_Abort_IT+0x9c>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <HAL_DMA_Abort_IT+0xd8>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d01a      	beq.n	800108a <HAL_DMA_Abort_IT+0x96>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <HAL_DMA_Abort_IT+0xdc>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d012      	beq.n	8001084 <HAL_DMA_Abort_IT+0x90>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <HAL_DMA_Abort_IT+0xe0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d00a      	beq.n	800107e <HAL_DMA_Abort_IT+0x8a>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <HAL_DMA_Abort_IT+0xe4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d102      	bne.n	8001078 <HAL_DMA_Abort_IT+0x84>
 8001072:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001076:	e00e      	b.n	8001096 <HAL_DMA_Abort_IT+0xa2>
 8001078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800107c:	e00b      	b.n	8001096 <HAL_DMA_Abort_IT+0xa2>
 800107e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001082:	e008      	b.n	8001096 <HAL_DMA_Abort_IT+0xa2>
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	e005      	b.n	8001096 <HAL_DMA_Abort_IT+0xa2>
 800108a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108e:	e002      	b.n	8001096 <HAL_DMA_Abort_IT+0xa2>
 8001090:	2310      	movs	r3, #16
 8001092:	e000      	b.n	8001096 <HAL_DMA_Abort_IT+0xa2>
 8001094:	2301      	movs	r3, #1
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_DMA_Abort_IT+0xe8>)
 8001098:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	4798      	blx	r3
    } 
  }
  return status;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40020008 	.word	0x40020008
 80010c8:	4002001c 	.word	0x4002001c
 80010cc:	40020030 	.word	0x40020030
 80010d0:	40020044 	.word	0x40020044
 80010d4:	40020058 	.word	0x40020058
 80010d8:	4002006c 	.word	0x4002006c
 80010dc:	40020000 	.word	0x40020000

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b08b      	sub	sp, #44	; 0x2c
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f2:	e161      	b.n	80013b8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010f4:	2201      	movs	r2, #1
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	429a      	cmp	r2, r3
 800110e:	f040 8150 	bne.w	80013b2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4a97      	ldr	r2, [pc, #604]	; (8001374 <HAL_GPIO_Init+0x294>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d05e      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 800111c:	4a95      	ldr	r2, [pc, #596]	; (8001374 <HAL_GPIO_Init+0x294>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d875      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001122:	4a95      	ldr	r2, [pc, #596]	; (8001378 <HAL_GPIO_Init+0x298>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d058      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001128:	4a93      	ldr	r2, [pc, #588]	; (8001378 <HAL_GPIO_Init+0x298>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d86f      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800112e:	4a93      	ldr	r2, [pc, #588]	; (800137c <HAL_GPIO_Init+0x29c>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d052      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001134:	4a91      	ldr	r2, [pc, #580]	; (800137c <HAL_GPIO_Init+0x29c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d869      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800113a:	4a91      	ldr	r2, [pc, #580]	; (8001380 <HAL_GPIO_Init+0x2a0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d04c      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001140:	4a8f      	ldr	r2, [pc, #572]	; (8001380 <HAL_GPIO_Init+0x2a0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d863      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001146:	4a8f      	ldr	r2, [pc, #572]	; (8001384 <HAL_GPIO_Init+0x2a4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d046      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 800114c:	4a8d      	ldr	r2, [pc, #564]	; (8001384 <HAL_GPIO_Init+0x2a4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d85d      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001152:	2b12      	cmp	r3, #18
 8001154:	d82a      	bhi.n	80011ac <HAL_GPIO_Init+0xcc>
 8001156:	2b12      	cmp	r3, #18
 8001158:	d859      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800115a:	a201      	add	r2, pc, #4	; (adr r2, 8001160 <HAL_GPIO_Init+0x80>)
 800115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001160:	080011db 	.word	0x080011db
 8001164:	080011b5 	.word	0x080011b5
 8001168:	080011c7 	.word	0x080011c7
 800116c:	08001209 	.word	0x08001209
 8001170:	0800120f 	.word	0x0800120f
 8001174:	0800120f 	.word	0x0800120f
 8001178:	0800120f 	.word	0x0800120f
 800117c:	0800120f 	.word	0x0800120f
 8001180:	0800120f 	.word	0x0800120f
 8001184:	0800120f 	.word	0x0800120f
 8001188:	0800120f 	.word	0x0800120f
 800118c:	0800120f 	.word	0x0800120f
 8001190:	0800120f 	.word	0x0800120f
 8001194:	0800120f 	.word	0x0800120f
 8001198:	0800120f 	.word	0x0800120f
 800119c:	0800120f 	.word	0x0800120f
 80011a0:	0800120f 	.word	0x0800120f
 80011a4:	080011bd 	.word	0x080011bd
 80011a8:	080011d1 	.word	0x080011d1
 80011ac:	4a76      	ldr	r2, [pc, #472]	; (8001388 <HAL_GPIO_Init+0x2a8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011b2:	e02c      	b.n	800120e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	623b      	str	r3, [r7, #32]
          break;
 80011ba:	e029      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	623b      	str	r3, [r7, #32]
          break;
 80011c4:	e024      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	3308      	adds	r3, #8
 80011cc:	623b      	str	r3, [r7, #32]
          break;
 80011ce:	e01f      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	330c      	adds	r3, #12
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e01a      	b.n	8001210 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011e2:	2304      	movs	r3, #4
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e013      	b.n	8001210 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d105      	bne.n	80011fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f0:	2308      	movs	r3, #8
 80011f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	611a      	str	r2, [r3, #16]
          break;
 80011fa:	e009      	b.n	8001210 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011fc:	2308      	movs	r3, #8
 80011fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	615a      	str	r2, [r3, #20]
          break;
 8001206:	e003      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
          break;
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x130>
          break;
 800120e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d801      	bhi.n	800121a <HAL_GPIO_Init+0x13a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	e001      	b.n	800121e <HAL_GPIO_Init+0x13e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3304      	adds	r3, #4
 800121e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2bff      	cmp	r3, #255	; 0xff
 8001224:	d802      	bhi.n	800122c <HAL_GPIO_Init+0x14c>
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0x152>
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	3b08      	subs	r3, #8
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	210f      	movs	r1, #15
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	6a39      	ldr	r1, [r7, #32]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	431a      	orrs	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80a9 	beq.w	80013b2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <HAL_GPIO_Init+0x2ac>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a49      	ldr	r2, [pc, #292]	; (800138c <HAL_GPIO_Init+0x2ac>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b47      	ldr	r3, [pc, #284]	; (800138c <HAL_GPIO_Init+0x2ac>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001278:	4a45      	ldr	r2, [pc, #276]	; (8001390 <HAL_GPIO_Init+0x2b0>)
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3d      	ldr	r2, [pc, #244]	; (8001394 <HAL_GPIO_Init+0x2b4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d00d      	beq.n	80012c0 <HAL_GPIO_Init+0x1e0>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3c      	ldr	r2, [pc, #240]	; (8001398 <HAL_GPIO_Init+0x2b8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d007      	beq.n	80012bc <HAL_GPIO_Init+0x1dc>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a3b      	ldr	r2, [pc, #236]	; (800139c <HAL_GPIO_Init+0x2bc>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d101      	bne.n	80012b8 <HAL_GPIO_Init+0x1d8>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e004      	b.n	80012c2 <HAL_GPIO_Init+0x1e2>
 80012b8:	2303      	movs	r3, #3
 80012ba:	e002      	b.n	80012c2 <HAL_GPIO_Init+0x1e2>
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <HAL_GPIO_Init+0x1e2>
 80012c0:	2300      	movs	r3, #0
 80012c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c4:	f002 0203 	and.w	r2, r2, #3
 80012c8:	0092      	lsls	r2, r2, #2
 80012ca:	4093      	lsls	r3, r2
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012d2:	492f      	ldr	r1, [pc, #188]	; (8001390 <HAL_GPIO_Init+0x2b0>)
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ec:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	492b      	ldr	r1, [pc, #172]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	43db      	mvns	r3, r3
 8001302:	4927      	ldr	r1, [pc, #156]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 8001304:	4013      	ands	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4921      	ldr	r1, [pc, #132]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	43db      	mvns	r3, r3
 800132a:	491d      	ldr	r1, [pc, #116]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 800132c:	4013      	ands	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	4917      	ldr	r1, [pc, #92]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	608b      	str	r3, [r1, #8]
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	43db      	mvns	r3, r3
 8001352:	4913      	ldr	r1, [pc, #76]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 8001354:	4013      	ands	r3, r2
 8001356:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d01f      	beq.n	80013a4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	490d      	ldr	r1, [pc, #52]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	60cb      	str	r3, [r1, #12]
 8001370:	e01f      	b.n	80013b2 <HAL_GPIO_Init+0x2d2>
 8001372:	bf00      	nop
 8001374:	10320000 	.word	0x10320000
 8001378:	10310000 	.word	0x10310000
 800137c:	10220000 	.word	0x10220000
 8001380:	10210000 	.word	0x10210000
 8001384:	10120000 	.word	0x10120000
 8001388:	10110000 	.word	0x10110000
 800138c:	40021000 	.word	0x40021000
 8001390:	40010000 	.word	0x40010000
 8001394:	40010800 	.word	0x40010800
 8001398:	40010c00 	.word	0x40010c00
 800139c:	40011000 	.word	0x40011000
 80013a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_GPIO_Init+0x2f4>)
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	4909      	ldr	r1, [pc, #36]	; (80013d4 <HAL_GPIO_Init+0x2f4>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	3301      	adds	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	fa22 f303 	lsr.w	r3, r2, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f47f ae96 	bne.w	80010f4 <HAL_GPIO_Init+0x14>
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	372c      	adds	r7, #44	; 0x2c
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40010400 	.word	0x40010400

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013f4:	e003      	b.n	80013fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	611a      	str	r2, [r3, #16]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4013      	ands	r3, r2
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43d9      	mvns	r1, r3
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	400b      	ands	r3, r1
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	611a      	str	r2, [r3, #16]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
	...

0800143c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e272      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8087 	beq.w	800156a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800145c:	4b92      	ldr	r3, [pc, #584]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 030c 	and.w	r3, r3, #12
 8001464:	2b04      	cmp	r3, #4
 8001466:	d00c      	beq.n	8001482 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001468:	4b8f      	ldr	r3, [pc, #572]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	2b08      	cmp	r3, #8
 8001472:	d112      	bne.n	800149a <HAL_RCC_OscConfig+0x5e>
 8001474:	4b8c      	ldr	r3, [pc, #560]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d10b      	bne.n	800149a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001482:	4b89      	ldr	r3, [pc, #548]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d06c      	beq.n	8001568 <HAL_RCC_OscConfig+0x12c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d168      	bne.n	8001568 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e24c      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a2:	d106      	bne.n	80014b2 <HAL_RCC_OscConfig+0x76>
 80014a4:	4b80      	ldr	r3, [pc, #512]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a7f      	ldr	r2, [pc, #508]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e02e      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x98>
 80014ba:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a7a      	ldr	r2, [pc, #488]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a77      	ldr	r2, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e01d      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0xbc>
 80014de:	4b72      	ldr	r3, [pc, #456]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a71      	ldr	r2, [pc, #452]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6e      	ldr	r2, [pc, #440]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014f8:	4b6b      	ldr	r3, [pc, #428]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a6a      	ldr	r2, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a67      	ldr	r2, [pc, #412]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d013      	beq.n	8001540 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff f9fc 	bl	8000914 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff f9f8 	bl	8000914 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e200      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0xe4>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff f9e8 	bl	8000914 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff f9e4 	bl	8000914 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1ec      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x10c>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d063      	beq.n	800163e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001576:	4b4c      	ldr	r3, [pc, #304]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b08      	cmp	r3, #8
 800158c:	d11c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x18c>
 800158e:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d116      	bne.n	80015c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x176>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e1c0      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4939      	ldr	r1, [pc, #228]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	e03a      	b.n	800163e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff f99d 	bl	8000914 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff f999 	bl	8000914 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e1a1      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4927      	ldr	r1, [pc, #156]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
 8001610:	e015      	b.n	800163e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff f97c 	bl	8000914 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff f978 	bl	8000914 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e180      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d03a      	beq.n	80016c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d019      	beq.n	8001686 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_RCC_OscConfig+0x274>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001658:	f7ff f95c 	bl	8000914 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff f958 	bl	8000914 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e160      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f000 fad8 	bl	8001c34 <RCC_Delay>
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_RCC_OscConfig+0x274>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7ff f942 	bl	8000914 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001692:	e00f      	b.n	80016b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff f93e 	bl	8000914 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d908      	bls.n	80016b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e146      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	42420000 	.word	0x42420000
 80016b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	4b92      	ldr	r3, [pc, #584]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e9      	bne.n	8001694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80a6 	beq.w	800181a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d2:	4b8b      	ldr	r3, [pc, #556]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10d      	bne.n	80016fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b88      	ldr	r3, [pc, #544]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a87      	ldr	r2, [pc, #540]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	61d3      	str	r3, [r2, #28]
 80016ea:	4b85      	ldr	r3, [pc, #532]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	4b82      	ldr	r3, [pc, #520]	; (8001904 <HAL_RCC_OscConfig+0x4c8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d118      	bne.n	8001738 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001706:	4b7f      	ldr	r3, [pc, #508]	; (8001904 <HAL_RCC_OscConfig+0x4c8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a7e      	ldr	r2, [pc, #504]	; (8001904 <HAL_RCC_OscConfig+0x4c8>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001712:	f7ff f8ff 	bl	8000914 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171a:	f7ff f8fb 	bl	8000914 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b64      	cmp	r3, #100	; 0x64
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e103      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	4b75      	ldr	r3, [pc, #468]	; (8001904 <HAL_RCC_OscConfig+0x4c8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x312>
 8001740:	4b6f      	ldr	r3, [pc, #444]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4a6e      	ldr	r2, [pc, #440]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6213      	str	r3, [r2, #32]
 800174c:	e02d      	b.n	80017aa <HAL_RCC_OscConfig+0x36e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x334>
 8001756:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a69      	ldr	r2, [pc, #420]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6213      	str	r3, [r2, #32]
 8001762:	4b67      	ldr	r3, [pc, #412]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a66      	ldr	r2, [pc, #408]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	6213      	str	r3, [r2, #32]
 800176e:	e01c      	b.n	80017aa <HAL_RCC_OscConfig+0x36e>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d10c      	bne.n	8001792 <HAL_RCC_OscConfig+0x356>
 8001778:	4b61      	ldr	r3, [pc, #388]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4a60      	ldr	r2, [pc, #384]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6213      	str	r3, [r2, #32]
 8001784:	4b5e      	ldr	r3, [pc, #376]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4a5d      	ldr	r2, [pc, #372]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6213      	str	r3, [r2, #32]
 8001790:	e00b      	b.n	80017aa <HAL_RCC_OscConfig+0x36e>
 8001792:	4b5b      	ldr	r3, [pc, #364]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4a5a      	ldr	r2, [pc, #360]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	6213      	str	r3, [r2, #32]
 800179e:	4b58      	ldr	r3, [pc, #352]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	4a57      	ldr	r2, [pc, #348]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	f023 0304 	bic.w	r3, r3, #4
 80017a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d015      	beq.n	80017de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff f8af 	bl	8000914 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff f8ab 	bl	8000914 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e0b1      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d0:	4b4b      	ldr	r3, [pc, #300]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0ee      	beq.n	80017ba <HAL_RCC_OscConfig+0x37e>
 80017dc:	e014      	b.n	8001808 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff f899 	bl	8000914 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff f895 	bl	8000914 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e09b      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fc:	4b40      	ldr	r3, [pc, #256]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ee      	bne.n	80017e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d105      	bne.n	800181a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180e:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	4a3b      	ldr	r2, [pc, #236]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001818:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8087 	beq.w	8001932 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d061      	beq.n	80018f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d146      	bne.n	80018c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001838:	4b33      	ldr	r3, [pc, #204]	; (8001908 <HAL_RCC_OscConfig+0x4cc>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff f869 	bl	8000914 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff f865 	bl	8000914 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e06d      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	4b29      	ldr	r3, [pc, #164]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186c:	d108      	bne.n	8001880 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	4921      	ldr	r1, [pc, #132]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a19      	ldr	r1, [r3, #32]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	430b      	orrs	r3, r1
 8001892:	491b      	ldr	r1, [pc, #108]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_RCC_OscConfig+0x4cc>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff f839 	bl	8000914 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff f835 	bl	8000914 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e03d      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x46a>
 80018c4:	e035      	b.n	8001932 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_RCC_OscConfig+0x4cc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff f822 	bl	8000914 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff f81e 	bl	8000914 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e026      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x498>
 80018f2:	e01e      	b.n	8001932 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d107      	bne.n	800190c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e019      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
 8001900:	40021000 	.word	0x40021000
 8001904:	40007000 	.word	0x40007000
 8001908:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_OscConfig+0x500>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	429a      	cmp	r2, r3
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0d0      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4b6a      	ldr	r3, [pc, #424]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d910      	bls.n	8001984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 0207 	bic.w	r2, r3, #7
 800196a:	4965      	ldr	r1, [pc, #404]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b63      	ldr	r3, [pc, #396]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0b8      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800199c:	4b59      	ldr	r3, [pc, #356]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a58      	ldr	r2, [pc, #352]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a52      	ldr	r2, [pc, #328]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c0:	4b50      	ldr	r3, [pc, #320]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	494d      	ldr	r1, [pc, #308]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d040      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d115      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e07f      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e073      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06b      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1e:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f023 0203 	bic.w	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4936      	ldr	r1, [pc, #216]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a30:	f7fe ff70 	bl	8000914 <HAL_GetTick>
 8001a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a38:	f7fe ff6c 	bl	8000914 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e053      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 020c 	and.w	r2, r3, #12
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1eb      	bne.n	8001a38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d210      	bcs.n	8001a90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 0207 	bic.w	r2, r3, #7
 8001a76:	4922      	ldr	r1, [pc, #136]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e032      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	4916      	ldr	r1, [pc, #88]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	490e      	ldr	r1, [pc, #56]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ace:	f000 f821 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	490a      	ldr	r1, [pc, #40]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae0:	5ccb      	ldrb	r3, [r1, r3]
 8001ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae6:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <HAL_RCC_ClockConfig+0x1cc>)
 8001ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_RCC_ClockConfig+0x1d0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fece 	bl	8000890 <HAL_InitTick>

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40022000 	.word	0x40022000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	080031d4 	.word	0x080031d4
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b14:	b490      	push	{r4, r7}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b1a:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b1c:	1d3c      	adds	r4, r7, #4
 8001b1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b24:	f240 2301 	movw	r3, #513	; 0x201
 8001b28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d002      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x40>
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d003      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0x46>
 8001b52:	e02b      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b56:	623b      	str	r3, [r7, #32]
      break;
 8001b58:	e02b      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	0c9b      	lsrs	r3, r3, #18
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3328      	adds	r3, #40	; 0x28
 8001b64:	443b      	add	r3, r7
 8001b66:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b6a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d012      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	0c5b      	lsrs	r3, r3, #17
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	3328      	adds	r3, #40	; 0x28
 8001b82:	443b      	add	r3, r7
 8001b84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b8e:	fb03 f202 	mul.w	r2, r3, r2
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9a:	e004      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	623b      	str	r3, [r7, #32]
      break;
 8001baa:	e002      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bae:	623b      	str	r3, [r7, #32]
      break;
 8001bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc90      	pop	{r4, r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	080031c4 	.word	0x080031c4
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	007a1200 	.word	0x007a1200
 8001bcc:	003d0900 	.word	0x003d0900

08001bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20000000 	.word	0x20000000

08001be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001be8:	f7ff fff2 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4903      	ldr	r1, [pc, #12]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	080031e4 	.word	0x080031e4

08001c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c10:	f7ff ffde 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	0adb      	lsrs	r3, r3, #11
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	080031e4 	.word	0x080031e4

08001c34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <RCC_Delay+0x34>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <RCC_Delay+0x38>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	0a5b      	lsrs	r3, r3, #9
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c50:	bf00      	nop
  }
  while (Delay --);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1e5a      	subs	r2, r3, #1
 8001c56:	60fa      	str	r2, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f9      	bne.n	8001c50 <RCC_Delay+0x1c>
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	10624dd3 	.word	0x10624dd3

08001c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d07d      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c90:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10d      	bne.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9c:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	4a4b      	ldr	r2, [pc, #300]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	61d3      	str	r3, [r2, #28]
 8001ca8:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb8:	4b46      	ldr	r3, [pc, #280]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d118      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc4:	4b43      	ldr	r3, [pc, #268]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a42      	ldr	r2, [pc, #264]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd0:	f7fe fe20 	bl	8000914 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd6:	e008      	b.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd8:	f7fe fe1c 	bl	8000914 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e06d      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cea:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cf6:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d02e      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d027      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d14:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d1e:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d24:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d2a:	4a29      	ldr	r2, [pc, #164]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d014      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7fe fdeb 	bl	8000914 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7fe fde7 	bl	8000914 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e036      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0ee      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4917      	ldr	r1, [pc, #92]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	490b      	ldr	r1, [pc, #44]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	4904      	ldr	r1, [pc, #16]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	42420440 	.word	0x42420440

08001ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e03f      	b.n	8001e6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fc48 	bl	8000698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2224      	movs	r2, #36	; 0x24
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fc85 	bl	8002730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b08a      	sub	sp, #40	; 0x28
 8001e7a:	af02      	add	r7, sp, #8
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	4613      	mov	r3, r2
 8001e84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d17c      	bne.n	8001f90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HAL_UART_Transmit+0x2c>
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e075      	b.n	8001f92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_UART_Transmit+0x3e>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e06e      	b.n	8001f92 <HAL_UART_Transmit+0x11c>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2221      	movs	r2, #33	; 0x21
 8001ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001eca:	f7fe fd23 	bl	8000914 <HAL_GetTick>
 8001ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	88fa      	ldrh	r2, [r7, #6]
 8001ed4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	88fa      	ldrh	r2, [r7, #6]
 8001eda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee4:	d108      	bne.n	8001ef8 <HAL_UART_Transmit+0x82>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d104      	bne.n	8001ef8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	e003      	b.n	8001f00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f08:	e02a      	b.n	8001f60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2200      	movs	r2, #0
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fa38 	bl	800238a <UART_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e036      	b.n	8001f92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10b      	bne.n	8001f42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	e007      	b.n	8001f52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1cf      	bne.n	8001f0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2200      	movs	r2, #0
 8001f72:	2140      	movs	r1, #64	; 0x40
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 fa08 	bl	800238a <UART_WaitOnFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e006      	b.n	8001f92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d11d      	bne.n	8001ff0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <HAL_UART_Receive_IT+0x26>
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e016      	b.n	8001ff2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_UART_Receive_IT+0x38>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e00f      	b.n	8001ff2 <HAL_UART_Receive_IT+0x58>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fa19 	bl	800241e <UART_Start_Receive_IT>
 8001fec:	4603      	mov	r3, r0
 8001fee:	e000      	b.n	8001ff2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001ff0:	2302      	movs	r3, #2
  }
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10d      	bne.n	800204e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_UART_IRQHandler+0x52>
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fac9 	bl	80025de <UART_Receive_IT>
      return;
 800204c:	e17b      	b.n	8002346 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80b1 	beq.w	80021b8 <HAL_UART_IRQHandler+0x1bc>
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_UART_IRQHandler+0x70>
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80a6 	beq.w	80021b8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_UART_IRQHandler+0x90>
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_UART_IRQHandler+0xb0>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f043 0202 	orr.w	r2, r3, #2
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_UART_IRQHandler+0xd0>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f043 0204 	orr.w	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00f      	beq.n	80020f6 <HAL_UART_IRQHandler+0xfa>
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d104      	bne.n	80020ea <HAL_UART_IRQHandler+0xee>
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f043 0208 	orr.w	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 811e 	beq.w	800233c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <HAL_UART_IRQHandler+0x11e>
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fa62 	bl	80025de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf14      	ite	ne
 8002128:	2301      	movne	r3, #1
 800212a:	2300      	moveq	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <HAL_UART_IRQHandler+0x146>
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d031      	beq.n	80021a6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f9a4 	bl	8002490 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d023      	beq.n	800219e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002164:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216a:	2b00      	cmp	r3, #0
 800216c:	d013      	beq.n	8002196 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002172:	4a76      	ldr	r2, [pc, #472]	; (800234c <HAL_UART_IRQHandler+0x350>)
 8002174:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe ff3a 	bl	8000ff4 <HAL_DMA_Abort_IT>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d016      	beq.n	80021b4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002190:	4610      	mov	r0, r2
 8002192:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002194:	e00e      	b.n	80021b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f8e3 	bl	8002362 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800219c:	e00a      	b.n	80021b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f8df 	bl	8002362 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a4:	e006      	b.n	80021b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f8db 	bl	8002362 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80021b2:	e0c3      	b.n	800233c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b4:	bf00      	nop
    return;
 80021b6:	e0c1      	b.n	800233c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	2b01      	cmp	r3, #1
 80021be:	f040 80a1 	bne.w	8002304 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 809b 	beq.w	8002304 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 8095 	beq.w	8002304 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d04e      	beq.n	800229c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002208:	8a3b      	ldrh	r3, [r7, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8098 	beq.w	8002340 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002214:	8a3a      	ldrh	r2, [r7, #16]
 8002216:	429a      	cmp	r2, r3
 8002218:	f080 8092 	bcs.w	8002340 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	8a3a      	ldrh	r2, [r7, #16]
 8002220:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b20      	cmp	r3, #32
 800222a:	d02b      	beq.n	8002284 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800223a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800225a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0210 	bic.w	r2, r2, #16
 8002278:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fe7d 	bl	8000f7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800228c:	b29b      	uxth	r3, r3
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	b29b      	uxth	r3, r3
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f86d 	bl	8002374 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800229a:	e051      	b.n	8002340 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d047      	beq.n	8002344 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80022b4:	8a7b      	ldrh	r3, [r7, #18]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d044      	beq.n	8002344 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022c8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0210 	bic.w	r2, r2, #16
 80022f6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022f8:	8a7b      	ldrh	r3, [r7, #18]
 80022fa:	4619      	mov	r1, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f839 	bl	8002374 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002302:	e01f      	b.n	8002344 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_UART_IRQHandler+0x324>
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f8f9 	bl	8002510 <UART_Transmit_IT>
    return;
 800231e:	e012      	b.n	8002346 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00d      	beq.n	8002346 <HAL_UART_IRQHandler+0x34a>
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f93a 	bl	80025ae <UART_EndTransmit_IT>
    return;
 800233a:	e004      	b.n	8002346 <HAL_UART_IRQHandler+0x34a>
    return;
 800233c:	bf00      	nop
 800233e:	e002      	b.n	8002346 <HAL_UART_IRQHandler+0x34a>
      return;
 8002340:	bf00      	nop
 8002342:	e000      	b.n	8002346 <HAL_UART_IRQHandler+0x34a>
      return;
 8002344:	bf00      	nop
  }
}
 8002346:	3728      	adds	r7, #40	; 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	080024e9 	.word	0x080024e9

08002350 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	4613      	mov	r3, r2
 8002398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800239a:	e02c      	b.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a2:	d028      	beq.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <UART_WaitOnFlagUntilTimeout+0x30>
 80023aa:	f7fe fab3 	bl	8000914 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d21d      	bcs.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e00f      	b.n	8002416 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4013      	ands	r3, r2
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	429a      	cmp	r2, r3
 8002404:	bf0c      	ite	eq
 8002406:	2301      	moveq	r3, #1
 8002408:	2300      	movne	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	429a      	cmp	r2, r3
 8002412:	d0c3      	beq.n	800239c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800241e:	b480      	push	{r7}
 8002420:	b085      	sub	sp, #20
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	4613      	mov	r3, r2
 800242a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2222      	movs	r2, #34	; 0x22
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002462:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0220 	orr.w	r2, r2, #32
 8002482:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80024a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d107      	bne.n	80024d0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0210 	bic.w	r2, r2, #16
 80024ce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f7ff ff2d 	bl	8002362 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b21      	cmp	r3, #33	; 0x21
 8002522:	d13e      	bne.n	80025a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252c:	d114      	bne.n	8002558 <UART_Transmit_IT+0x48>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d110      	bne.n	8002558 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800254a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	1c9a      	adds	r2, r3, #2
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	621a      	str	r2, [r3, #32]
 8002556:	e008      	b.n	800256a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	1c59      	adds	r1, r3, #1
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6211      	str	r1, [r2, #32]
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29b      	uxth	r3, r3
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4619      	mov	r1, r3
 8002578:	84d1      	strh	r1, [r2, #38]	; 0x26
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10f      	bne.n	800259e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800258c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800259c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e000      	b.n	80025a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80025a2:	2302      	movs	r3, #2
  }
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff febe 	bl	8002350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b22      	cmp	r3, #34	; 0x22
 80025f0:	f040 8099 	bne.w	8002726 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fc:	d117      	bne.n	800262e <UART_Receive_IT+0x50>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d113      	bne.n	800262e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800261c:	b29a      	uxth	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	1c9a      	adds	r2, r3, #2
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
 800262c:	e026      	b.n	800267c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002640:	d007      	beq.n	8002652 <UART_Receive_IT+0x74>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10a      	bne.n	8002660 <UART_Receive_IT+0x82>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	e008      	b.n	8002672 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800266c:	b2da      	uxtb	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29b      	uxth	r3, r3
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4619      	mov	r1, r3
 800268a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800268c:	2b00      	cmp	r3, #0
 800268e:	d148      	bne.n	8002722 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0220 	bic.w	r2, r2, #32
 800269e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d123      	bne.n	8002718 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0210 	bic.w	r2, r2, #16
 80026e4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d10a      	bne.n	800270a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff fe2f 	bl	8002374 <HAL_UARTEx_RxEventCallback>
 8002716:	e002      	b.n	800271e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7fd fded 	bl	80002f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e002      	b.n	8002728 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e000      	b.n	8002728 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
  }
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800276a:	f023 030c 	bic.w	r3, r3, #12
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	430b      	orrs	r3, r1
 8002776:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2c      	ldr	r2, [pc, #176]	; (8002844 <UART_SetConfig+0x114>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d103      	bne.n	80027a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002798:	f7ff fa38 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	e002      	b.n	80027a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027a0:	f7ff fa20 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 80027a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	009a      	lsls	r2, r3, #2
 80027b0:	441a      	add	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	4a22      	ldr	r2, [pc, #136]	; (8002848 <UART_SetConfig+0x118>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	0119      	lsls	r1, r3, #4
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009a      	lsls	r2, r3, #2
 80027d0:	441a      	add	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <UART_SetConfig+0x118>)
 80027de:	fba3 0302 	umull	r0, r3, r3, r2
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2064      	movs	r0, #100	; 0x64
 80027e6:	fb00 f303 	mul.w	r3, r0, r3
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	3332      	adds	r3, #50	; 0x32
 80027f0:	4a15      	ldr	r2, [pc, #84]	; (8002848 <UART_SetConfig+0x118>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027fc:	4419      	add	r1, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009a      	lsls	r2, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fbb2 f2f3 	udiv	r2, r2, r3
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <UART_SetConfig+0x118>)
 8002816:	fba3 0302 	umull	r0, r3, r3, r2
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2064      	movs	r0, #100	; 0x64
 800281e:	fb00 f303 	mul.w	r3, r0, r3
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	4a07      	ldr	r2, [pc, #28]	; (8002848 <UART_SetConfig+0x118>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	f003 020f 	and.w	r2, r3, #15
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	440a      	add	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40013800 	.word	0x40013800
 8002848:	51eb851f 	.word	0x51eb851f

0800284c <__errno>:
 800284c:	4b01      	ldr	r3, [pc, #4]	; (8002854 <__errno+0x8>)
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	2000000c 	.word	0x2000000c

08002858 <__libc_init_array>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	2600      	movs	r6, #0
 800285c:	4d0c      	ldr	r5, [pc, #48]	; (8002890 <__libc_init_array+0x38>)
 800285e:	4c0d      	ldr	r4, [pc, #52]	; (8002894 <__libc_init_array+0x3c>)
 8002860:	1b64      	subs	r4, r4, r5
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	42a6      	cmp	r6, r4
 8002866:	d109      	bne.n	800287c <__libc_init_array+0x24>
 8002868:	f000 fc9c 	bl	80031a4 <_init>
 800286c:	2600      	movs	r6, #0
 800286e:	4d0a      	ldr	r5, [pc, #40]	; (8002898 <__libc_init_array+0x40>)
 8002870:	4c0a      	ldr	r4, [pc, #40]	; (800289c <__libc_init_array+0x44>)
 8002872:	1b64      	subs	r4, r4, r5
 8002874:	10a4      	asrs	r4, r4, #2
 8002876:	42a6      	cmp	r6, r4
 8002878:	d105      	bne.n	8002886 <__libc_init_array+0x2e>
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002880:	4798      	blx	r3
 8002882:	3601      	adds	r6, #1
 8002884:	e7ee      	b.n	8002864 <__libc_init_array+0xc>
 8002886:	f855 3b04 	ldr.w	r3, [r5], #4
 800288a:	4798      	blx	r3
 800288c:	3601      	adds	r6, #1
 800288e:	e7f2      	b.n	8002876 <__libc_init_array+0x1e>
 8002890:	08003220 	.word	0x08003220
 8002894:	08003220 	.word	0x08003220
 8002898:	08003220 	.word	0x08003220
 800289c:	08003224 	.word	0x08003224

080028a0 <memset>:
 80028a0:	4603      	mov	r3, r0
 80028a2:	4402      	add	r2, r0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d100      	bne.n	80028aa <memset+0xa>
 80028a8:	4770      	bx	lr
 80028aa:	f803 1b01 	strb.w	r1, [r3], #1
 80028ae:	e7f9      	b.n	80028a4 <memset+0x4>

080028b0 <siprintf>:
 80028b0:	b40e      	push	{r1, r2, r3}
 80028b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028b6:	b500      	push	{lr}
 80028b8:	b09c      	sub	sp, #112	; 0x70
 80028ba:	ab1d      	add	r3, sp, #116	; 0x74
 80028bc:	9002      	str	r0, [sp, #8]
 80028be:	9006      	str	r0, [sp, #24]
 80028c0:	9107      	str	r1, [sp, #28]
 80028c2:	9104      	str	r1, [sp, #16]
 80028c4:	4808      	ldr	r0, [pc, #32]	; (80028e8 <siprintf+0x38>)
 80028c6:	4909      	ldr	r1, [pc, #36]	; (80028ec <siprintf+0x3c>)
 80028c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80028cc:	9105      	str	r1, [sp, #20]
 80028ce:	6800      	ldr	r0, [r0, #0]
 80028d0:	a902      	add	r1, sp, #8
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	f000 f868 	bl	80029a8 <_svfiprintf_r>
 80028d8:	2200      	movs	r2, #0
 80028da:	9b02      	ldr	r3, [sp, #8]
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	b01c      	add	sp, #112	; 0x70
 80028e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80028e4:	b003      	add	sp, #12
 80028e6:	4770      	bx	lr
 80028e8:	2000000c 	.word	0x2000000c
 80028ec:	ffff0208 	.word	0xffff0208

080028f0 <__ssputs_r>:
 80028f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028f4:	688e      	ldr	r6, [r1, #8]
 80028f6:	4682      	mov	sl, r0
 80028f8:	429e      	cmp	r6, r3
 80028fa:	460c      	mov	r4, r1
 80028fc:	4690      	mov	r8, r2
 80028fe:	461f      	mov	r7, r3
 8002900:	d838      	bhi.n	8002974 <__ssputs_r+0x84>
 8002902:	898a      	ldrh	r2, [r1, #12]
 8002904:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002908:	d032      	beq.n	8002970 <__ssputs_r+0x80>
 800290a:	6825      	ldr	r5, [r4, #0]
 800290c:	6909      	ldr	r1, [r1, #16]
 800290e:	3301      	adds	r3, #1
 8002910:	eba5 0901 	sub.w	r9, r5, r1
 8002914:	6965      	ldr	r5, [r4, #20]
 8002916:	444b      	add	r3, r9
 8002918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800291c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002920:	106d      	asrs	r5, r5, #1
 8002922:	429d      	cmp	r5, r3
 8002924:	bf38      	it	cc
 8002926:	461d      	movcc	r5, r3
 8002928:	0553      	lsls	r3, r2, #21
 800292a:	d531      	bpl.n	8002990 <__ssputs_r+0xa0>
 800292c:	4629      	mov	r1, r5
 800292e:	f000 fb6f 	bl	8003010 <_malloc_r>
 8002932:	4606      	mov	r6, r0
 8002934:	b950      	cbnz	r0, 800294c <__ssputs_r+0x5c>
 8002936:	230c      	movs	r3, #12
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
 800293c:	f8ca 3000 	str.w	r3, [sl]
 8002940:	89a3      	ldrh	r3, [r4, #12]
 8002942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002946:	81a3      	strh	r3, [r4, #12]
 8002948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800294c:	464a      	mov	r2, r9
 800294e:	6921      	ldr	r1, [r4, #16]
 8002950:	f000 face 	bl	8002ef0 <memcpy>
 8002954:	89a3      	ldrh	r3, [r4, #12]
 8002956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800295a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295e:	81a3      	strh	r3, [r4, #12]
 8002960:	6126      	str	r6, [r4, #16]
 8002962:	444e      	add	r6, r9
 8002964:	6026      	str	r6, [r4, #0]
 8002966:	463e      	mov	r6, r7
 8002968:	6165      	str	r5, [r4, #20]
 800296a:	eba5 0509 	sub.w	r5, r5, r9
 800296e:	60a5      	str	r5, [r4, #8]
 8002970:	42be      	cmp	r6, r7
 8002972:	d900      	bls.n	8002976 <__ssputs_r+0x86>
 8002974:	463e      	mov	r6, r7
 8002976:	4632      	mov	r2, r6
 8002978:	4641      	mov	r1, r8
 800297a:	6820      	ldr	r0, [r4, #0]
 800297c:	f000 fac6 	bl	8002f0c <memmove>
 8002980:	68a3      	ldr	r3, [r4, #8]
 8002982:	2000      	movs	r0, #0
 8002984:	1b9b      	subs	r3, r3, r6
 8002986:	60a3      	str	r3, [r4, #8]
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	4433      	add	r3, r6
 800298c:	6023      	str	r3, [r4, #0]
 800298e:	e7db      	b.n	8002948 <__ssputs_r+0x58>
 8002990:	462a      	mov	r2, r5
 8002992:	f000 fbb1 	bl	80030f8 <_realloc_r>
 8002996:	4606      	mov	r6, r0
 8002998:	2800      	cmp	r0, #0
 800299a:	d1e1      	bne.n	8002960 <__ssputs_r+0x70>
 800299c:	4650      	mov	r0, sl
 800299e:	6921      	ldr	r1, [r4, #16]
 80029a0:	f000 face 	bl	8002f40 <_free_r>
 80029a4:	e7c7      	b.n	8002936 <__ssputs_r+0x46>
	...

080029a8 <_svfiprintf_r>:
 80029a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ac:	4698      	mov	r8, r3
 80029ae:	898b      	ldrh	r3, [r1, #12]
 80029b0:	4607      	mov	r7, r0
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	460d      	mov	r5, r1
 80029b6:	4614      	mov	r4, r2
 80029b8:	b09d      	sub	sp, #116	; 0x74
 80029ba:	d50e      	bpl.n	80029da <_svfiprintf_r+0x32>
 80029bc:	690b      	ldr	r3, [r1, #16]
 80029be:	b963      	cbnz	r3, 80029da <_svfiprintf_r+0x32>
 80029c0:	2140      	movs	r1, #64	; 0x40
 80029c2:	f000 fb25 	bl	8003010 <_malloc_r>
 80029c6:	6028      	str	r0, [r5, #0]
 80029c8:	6128      	str	r0, [r5, #16]
 80029ca:	b920      	cbnz	r0, 80029d6 <_svfiprintf_r+0x2e>
 80029cc:	230c      	movs	r3, #12
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	e0d1      	b.n	8002b7a <_svfiprintf_r+0x1d2>
 80029d6:	2340      	movs	r3, #64	; 0x40
 80029d8:	616b      	str	r3, [r5, #20]
 80029da:	2300      	movs	r3, #0
 80029dc:	9309      	str	r3, [sp, #36]	; 0x24
 80029de:	2320      	movs	r3, #32
 80029e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029e4:	2330      	movs	r3, #48	; 0x30
 80029e6:	f04f 0901 	mov.w	r9, #1
 80029ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80029ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002b94 <_svfiprintf_r+0x1ec>
 80029f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029f6:	4623      	mov	r3, r4
 80029f8:	469a      	mov	sl, r3
 80029fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029fe:	b10a      	cbz	r2, 8002a04 <_svfiprintf_r+0x5c>
 8002a00:	2a25      	cmp	r2, #37	; 0x25
 8002a02:	d1f9      	bne.n	80029f8 <_svfiprintf_r+0x50>
 8002a04:	ebba 0b04 	subs.w	fp, sl, r4
 8002a08:	d00b      	beq.n	8002a22 <_svfiprintf_r+0x7a>
 8002a0a:	465b      	mov	r3, fp
 8002a0c:	4622      	mov	r2, r4
 8002a0e:	4629      	mov	r1, r5
 8002a10:	4638      	mov	r0, r7
 8002a12:	f7ff ff6d 	bl	80028f0 <__ssputs_r>
 8002a16:	3001      	adds	r0, #1
 8002a18:	f000 80aa 	beq.w	8002b70 <_svfiprintf_r+0x1c8>
 8002a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a1e:	445a      	add	r2, fp
 8002a20:	9209      	str	r2, [sp, #36]	; 0x24
 8002a22:	f89a 3000 	ldrb.w	r3, [sl]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80a2 	beq.w	8002b70 <_svfiprintf_r+0x1c8>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a36:	f10a 0a01 	add.w	sl, sl, #1
 8002a3a:	9304      	str	r3, [sp, #16]
 8002a3c:	9307      	str	r3, [sp, #28]
 8002a3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a42:	931a      	str	r3, [sp, #104]	; 0x68
 8002a44:	4654      	mov	r4, sl
 8002a46:	2205      	movs	r2, #5
 8002a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a4c:	4851      	ldr	r0, [pc, #324]	; (8002b94 <_svfiprintf_r+0x1ec>)
 8002a4e:	f000 fa41 	bl	8002ed4 <memchr>
 8002a52:	9a04      	ldr	r2, [sp, #16]
 8002a54:	b9d8      	cbnz	r0, 8002a8e <_svfiprintf_r+0xe6>
 8002a56:	06d0      	lsls	r0, r2, #27
 8002a58:	bf44      	itt	mi
 8002a5a:	2320      	movmi	r3, #32
 8002a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a60:	0711      	lsls	r1, r2, #28
 8002a62:	bf44      	itt	mi
 8002a64:	232b      	movmi	r3, #43	; 0x2b
 8002a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a70:	d015      	beq.n	8002a9e <_svfiprintf_r+0xf6>
 8002a72:	4654      	mov	r4, sl
 8002a74:	2000      	movs	r0, #0
 8002a76:	f04f 0c0a 	mov.w	ip, #10
 8002a7a:	9a07      	ldr	r2, [sp, #28]
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a82:	3b30      	subs	r3, #48	; 0x30
 8002a84:	2b09      	cmp	r3, #9
 8002a86:	d94e      	bls.n	8002b26 <_svfiprintf_r+0x17e>
 8002a88:	b1b0      	cbz	r0, 8002ab8 <_svfiprintf_r+0x110>
 8002a8a:	9207      	str	r2, [sp, #28]
 8002a8c:	e014      	b.n	8002ab8 <_svfiprintf_r+0x110>
 8002a8e:	eba0 0308 	sub.w	r3, r0, r8
 8002a92:	fa09 f303 	lsl.w	r3, r9, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	46a2      	mov	sl, r4
 8002a9a:	9304      	str	r3, [sp, #16]
 8002a9c:	e7d2      	b.n	8002a44 <_svfiprintf_r+0x9c>
 8002a9e:	9b03      	ldr	r3, [sp, #12]
 8002aa0:	1d19      	adds	r1, r3, #4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	9103      	str	r1, [sp, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bfbb      	ittet	lt
 8002aaa:	425b      	neglt	r3, r3
 8002aac:	f042 0202 	orrlt.w	r2, r2, #2
 8002ab0:	9307      	strge	r3, [sp, #28]
 8002ab2:	9307      	strlt	r3, [sp, #28]
 8002ab4:	bfb8      	it	lt
 8002ab6:	9204      	strlt	r2, [sp, #16]
 8002ab8:	7823      	ldrb	r3, [r4, #0]
 8002aba:	2b2e      	cmp	r3, #46	; 0x2e
 8002abc:	d10c      	bne.n	8002ad8 <_svfiprintf_r+0x130>
 8002abe:	7863      	ldrb	r3, [r4, #1]
 8002ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ac2:	d135      	bne.n	8002b30 <_svfiprintf_r+0x188>
 8002ac4:	9b03      	ldr	r3, [sp, #12]
 8002ac6:	3402      	adds	r4, #2
 8002ac8:	1d1a      	adds	r2, r3, #4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	9203      	str	r2, [sp, #12]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bfb8      	it	lt
 8002ad2:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ad6:	9305      	str	r3, [sp, #20]
 8002ad8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002b98 <_svfiprintf_r+0x1f0>
 8002adc:	2203      	movs	r2, #3
 8002ade:	4650      	mov	r0, sl
 8002ae0:	7821      	ldrb	r1, [r4, #0]
 8002ae2:	f000 f9f7 	bl	8002ed4 <memchr>
 8002ae6:	b140      	cbz	r0, 8002afa <_svfiprintf_r+0x152>
 8002ae8:	2340      	movs	r3, #64	; 0x40
 8002aea:	eba0 000a 	sub.w	r0, r0, sl
 8002aee:	fa03 f000 	lsl.w	r0, r3, r0
 8002af2:	9b04      	ldr	r3, [sp, #16]
 8002af4:	3401      	adds	r4, #1
 8002af6:	4303      	orrs	r3, r0
 8002af8:	9304      	str	r3, [sp, #16]
 8002afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002afe:	2206      	movs	r2, #6
 8002b00:	4826      	ldr	r0, [pc, #152]	; (8002b9c <_svfiprintf_r+0x1f4>)
 8002b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b06:	f000 f9e5 	bl	8002ed4 <memchr>
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	d038      	beq.n	8002b80 <_svfiprintf_r+0x1d8>
 8002b0e:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <_svfiprintf_r+0x1f8>)
 8002b10:	bb1b      	cbnz	r3, 8002b5a <_svfiprintf_r+0x1b2>
 8002b12:	9b03      	ldr	r3, [sp, #12]
 8002b14:	3307      	adds	r3, #7
 8002b16:	f023 0307 	bic.w	r3, r3, #7
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	9303      	str	r3, [sp, #12]
 8002b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b20:	4433      	add	r3, r6
 8002b22:	9309      	str	r3, [sp, #36]	; 0x24
 8002b24:	e767      	b.n	80029f6 <_svfiprintf_r+0x4e>
 8002b26:	460c      	mov	r4, r1
 8002b28:	2001      	movs	r0, #1
 8002b2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b2e:	e7a5      	b.n	8002a7c <_svfiprintf_r+0xd4>
 8002b30:	2300      	movs	r3, #0
 8002b32:	f04f 0c0a 	mov.w	ip, #10
 8002b36:	4619      	mov	r1, r3
 8002b38:	3401      	adds	r4, #1
 8002b3a:	9305      	str	r3, [sp, #20]
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b42:	3a30      	subs	r2, #48	; 0x30
 8002b44:	2a09      	cmp	r2, #9
 8002b46:	d903      	bls.n	8002b50 <_svfiprintf_r+0x1a8>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0c5      	beq.n	8002ad8 <_svfiprintf_r+0x130>
 8002b4c:	9105      	str	r1, [sp, #20]
 8002b4e:	e7c3      	b.n	8002ad8 <_svfiprintf_r+0x130>
 8002b50:	4604      	mov	r4, r0
 8002b52:	2301      	movs	r3, #1
 8002b54:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b58:	e7f0      	b.n	8002b3c <_svfiprintf_r+0x194>
 8002b5a:	ab03      	add	r3, sp, #12
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	462a      	mov	r2, r5
 8002b60:	4638      	mov	r0, r7
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <_svfiprintf_r+0x1fc>)
 8002b64:	a904      	add	r1, sp, #16
 8002b66:	f3af 8000 	nop.w
 8002b6a:	1c42      	adds	r2, r0, #1
 8002b6c:	4606      	mov	r6, r0
 8002b6e:	d1d6      	bne.n	8002b1e <_svfiprintf_r+0x176>
 8002b70:	89ab      	ldrh	r3, [r5, #12]
 8002b72:	065b      	lsls	r3, r3, #25
 8002b74:	f53f af2c 	bmi.w	80029d0 <_svfiprintf_r+0x28>
 8002b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b7a:	b01d      	add	sp, #116	; 0x74
 8002b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b80:	ab03      	add	r3, sp, #12
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	462a      	mov	r2, r5
 8002b86:	4638      	mov	r0, r7
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <_svfiprintf_r+0x1fc>)
 8002b8a:	a904      	add	r1, sp, #16
 8002b8c:	f000 f87c 	bl	8002c88 <_printf_i>
 8002b90:	e7eb      	b.n	8002b6a <_svfiprintf_r+0x1c2>
 8002b92:	bf00      	nop
 8002b94:	080031ec 	.word	0x080031ec
 8002b98:	080031f2 	.word	0x080031f2
 8002b9c:	080031f6 	.word	0x080031f6
 8002ba0:	00000000 	.word	0x00000000
 8002ba4:	080028f1 	.word	0x080028f1

08002ba8 <_printf_common>:
 8002ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bac:	4616      	mov	r6, r2
 8002bae:	4699      	mov	r9, r3
 8002bb0:	688a      	ldr	r2, [r1, #8]
 8002bb2:	690b      	ldr	r3, [r1, #16]
 8002bb4:	4607      	mov	r7, r0
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	bfb8      	it	lt
 8002bba:	4613      	movlt	r3, r2
 8002bbc:	6033      	str	r3, [r6, #0]
 8002bbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bc8:	b10a      	cbz	r2, 8002bce <_printf_common+0x26>
 8002bca:	3301      	adds	r3, #1
 8002bcc:	6033      	str	r3, [r6, #0]
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	0699      	lsls	r1, r3, #26
 8002bd2:	bf42      	ittt	mi
 8002bd4:	6833      	ldrmi	r3, [r6, #0]
 8002bd6:	3302      	addmi	r3, #2
 8002bd8:	6033      	strmi	r3, [r6, #0]
 8002bda:	6825      	ldr	r5, [r4, #0]
 8002bdc:	f015 0506 	ands.w	r5, r5, #6
 8002be0:	d106      	bne.n	8002bf0 <_printf_common+0x48>
 8002be2:	f104 0a19 	add.w	sl, r4, #25
 8002be6:	68e3      	ldr	r3, [r4, #12]
 8002be8:	6832      	ldr	r2, [r6, #0]
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	42ab      	cmp	r3, r5
 8002bee:	dc28      	bgt.n	8002c42 <_printf_common+0x9a>
 8002bf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bf4:	1e13      	subs	r3, r2, #0
 8002bf6:	6822      	ldr	r2, [r4, #0]
 8002bf8:	bf18      	it	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	0692      	lsls	r2, r2, #26
 8002bfe:	d42d      	bmi.n	8002c5c <_printf_common+0xb4>
 8002c00:	4649      	mov	r1, r9
 8002c02:	4638      	mov	r0, r7
 8002c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c08:	47c0      	blx	r8
 8002c0a:	3001      	adds	r0, #1
 8002c0c:	d020      	beq.n	8002c50 <_printf_common+0xa8>
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	68e5      	ldr	r5, [r4, #12]
 8002c12:	f003 0306 	and.w	r3, r3, #6
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	bf18      	it	ne
 8002c1a:	2500      	movne	r5, #0
 8002c1c:	6832      	ldr	r2, [r6, #0]
 8002c1e:	f04f 0600 	mov.w	r6, #0
 8002c22:	68a3      	ldr	r3, [r4, #8]
 8002c24:	bf08      	it	eq
 8002c26:	1aad      	subeq	r5, r5, r2
 8002c28:	6922      	ldr	r2, [r4, #16]
 8002c2a:	bf08      	it	eq
 8002c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c30:	4293      	cmp	r3, r2
 8002c32:	bfc4      	itt	gt
 8002c34:	1a9b      	subgt	r3, r3, r2
 8002c36:	18ed      	addgt	r5, r5, r3
 8002c38:	341a      	adds	r4, #26
 8002c3a:	42b5      	cmp	r5, r6
 8002c3c:	d11a      	bne.n	8002c74 <_printf_common+0xcc>
 8002c3e:	2000      	movs	r0, #0
 8002c40:	e008      	b.n	8002c54 <_printf_common+0xac>
 8002c42:	2301      	movs	r3, #1
 8002c44:	4652      	mov	r2, sl
 8002c46:	4649      	mov	r1, r9
 8002c48:	4638      	mov	r0, r7
 8002c4a:	47c0      	blx	r8
 8002c4c:	3001      	adds	r0, #1
 8002c4e:	d103      	bne.n	8002c58 <_printf_common+0xb0>
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c58:	3501      	adds	r5, #1
 8002c5a:	e7c4      	b.n	8002be6 <_printf_common+0x3e>
 8002c5c:	2030      	movs	r0, #48	; 0x30
 8002c5e:	18e1      	adds	r1, r4, r3
 8002c60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c6a:	4422      	add	r2, r4
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c72:	e7c5      	b.n	8002c00 <_printf_common+0x58>
 8002c74:	2301      	movs	r3, #1
 8002c76:	4622      	mov	r2, r4
 8002c78:	4649      	mov	r1, r9
 8002c7a:	4638      	mov	r0, r7
 8002c7c:	47c0      	blx	r8
 8002c7e:	3001      	adds	r0, #1
 8002c80:	d0e6      	beq.n	8002c50 <_printf_common+0xa8>
 8002c82:	3601      	adds	r6, #1
 8002c84:	e7d9      	b.n	8002c3a <_printf_common+0x92>
	...

08002c88 <_printf_i>:
 8002c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c8c:	7e0f      	ldrb	r7, [r1, #24]
 8002c8e:	4691      	mov	r9, r2
 8002c90:	2f78      	cmp	r7, #120	; 0x78
 8002c92:	4680      	mov	r8, r0
 8002c94:	460c      	mov	r4, r1
 8002c96:	469a      	mov	sl, r3
 8002c98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c9e:	d807      	bhi.n	8002cb0 <_printf_i+0x28>
 8002ca0:	2f62      	cmp	r7, #98	; 0x62
 8002ca2:	d80a      	bhi.n	8002cba <_printf_i+0x32>
 8002ca4:	2f00      	cmp	r7, #0
 8002ca6:	f000 80d9 	beq.w	8002e5c <_printf_i+0x1d4>
 8002caa:	2f58      	cmp	r7, #88	; 0x58
 8002cac:	f000 80a4 	beq.w	8002df8 <_printf_i+0x170>
 8002cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002cb8:	e03a      	b.n	8002d30 <_printf_i+0xa8>
 8002cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002cbe:	2b15      	cmp	r3, #21
 8002cc0:	d8f6      	bhi.n	8002cb0 <_printf_i+0x28>
 8002cc2:	a101      	add	r1, pc, #4	; (adr r1, 8002cc8 <_printf_i+0x40>)
 8002cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cc8:	08002d21 	.word	0x08002d21
 8002ccc:	08002d35 	.word	0x08002d35
 8002cd0:	08002cb1 	.word	0x08002cb1
 8002cd4:	08002cb1 	.word	0x08002cb1
 8002cd8:	08002cb1 	.word	0x08002cb1
 8002cdc:	08002cb1 	.word	0x08002cb1
 8002ce0:	08002d35 	.word	0x08002d35
 8002ce4:	08002cb1 	.word	0x08002cb1
 8002ce8:	08002cb1 	.word	0x08002cb1
 8002cec:	08002cb1 	.word	0x08002cb1
 8002cf0:	08002cb1 	.word	0x08002cb1
 8002cf4:	08002e43 	.word	0x08002e43
 8002cf8:	08002d65 	.word	0x08002d65
 8002cfc:	08002e25 	.word	0x08002e25
 8002d00:	08002cb1 	.word	0x08002cb1
 8002d04:	08002cb1 	.word	0x08002cb1
 8002d08:	08002e65 	.word	0x08002e65
 8002d0c:	08002cb1 	.word	0x08002cb1
 8002d10:	08002d65 	.word	0x08002d65
 8002d14:	08002cb1 	.word	0x08002cb1
 8002d18:	08002cb1 	.word	0x08002cb1
 8002d1c:	08002e2d 	.word	0x08002e2d
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	1d1a      	adds	r2, r3, #4
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	602a      	str	r2, [r5, #0]
 8002d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0a4      	b.n	8002e7e <_printf_i+0x1f6>
 8002d34:	6820      	ldr	r0, [r4, #0]
 8002d36:	6829      	ldr	r1, [r5, #0]
 8002d38:	0606      	lsls	r6, r0, #24
 8002d3a:	f101 0304 	add.w	r3, r1, #4
 8002d3e:	d50a      	bpl.n	8002d56 <_printf_i+0xce>
 8002d40:	680e      	ldr	r6, [r1, #0]
 8002d42:	602b      	str	r3, [r5, #0]
 8002d44:	2e00      	cmp	r6, #0
 8002d46:	da03      	bge.n	8002d50 <_printf_i+0xc8>
 8002d48:	232d      	movs	r3, #45	; 0x2d
 8002d4a:	4276      	negs	r6, r6
 8002d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d50:	230a      	movs	r3, #10
 8002d52:	485e      	ldr	r0, [pc, #376]	; (8002ecc <_printf_i+0x244>)
 8002d54:	e019      	b.n	8002d8a <_printf_i+0x102>
 8002d56:	680e      	ldr	r6, [r1, #0]
 8002d58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d5c:	602b      	str	r3, [r5, #0]
 8002d5e:	bf18      	it	ne
 8002d60:	b236      	sxthne	r6, r6
 8002d62:	e7ef      	b.n	8002d44 <_printf_i+0xbc>
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	6820      	ldr	r0, [r4, #0]
 8002d68:	1d19      	adds	r1, r3, #4
 8002d6a:	6029      	str	r1, [r5, #0]
 8002d6c:	0601      	lsls	r1, r0, #24
 8002d6e:	d501      	bpl.n	8002d74 <_printf_i+0xec>
 8002d70:	681e      	ldr	r6, [r3, #0]
 8002d72:	e002      	b.n	8002d7a <_printf_i+0xf2>
 8002d74:	0646      	lsls	r6, r0, #25
 8002d76:	d5fb      	bpl.n	8002d70 <_printf_i+0xe8>
 8002d78:	881e      	ldrh	r6, [r3, #0]
 8002d7a:	2f6f      	cmp	r7, #111	; 0x6f
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2308      	moveq	r3, #8
 8002d80:	230a      	movne	r3, #10
 8002d82:	4852      	ldr	r0, [pc, #328]	; (8002ecc <_printf_i+0x244>)
 8002d84:	2100      	movs	r1, #0
 8002d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d8a:	6865      	ldr	r5, [r4, #4]
 8002d8c:	2d00      	cmp	r5, #0
 8002d8e:	bfa8      	it	ge
 8002d90:	6821      	ldrge	r1, [r4, #0]
 8002d92:	60a5      	str	r5, [r4, #8]
 8002d94:	bfa4      	itt	ge
 8002d96:	f021 0104 	bicge.w	r1, r1, #4
 8002d9a:	6021      	strge	r1, [r4, #0]
 8002d9c:	b90e      	cbnz	r6, 8002da2 <_printf_i+0x11a>
 8002d9e:	2d00      	cmp	r5, #0
 8002da0:	d04d      	beq.n	8002e3e <_printf_i+0x1b6>
 8002da2:	4615      	mov	r5, r2
 8002da4:	fbb6 f1f3 	udiv	r1, r6, r3
 8002da8:	fb03 6711 	mls	r7, r3, r1, r6
 8002dac:	5dc7      	ldrb	r7, [r0, r7]
 8002dae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002db2:	4637      	mov	r7, r6
 8002db4:	42bb      	cmp	r3, r7
 8002db6:	460e      	mov	r6, r1
 8002db8:	d9f4      	bls.n	8002da4 <_printf_i+0x11c>
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d10b      	bne.n	8002dd6 <_printf_i+0x14e>
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	07de      	lsls	r6, r3, #31
 8002dc2:	d508      	bpl.n	8002dd6 <_printf_i+0x14e>
 8002dc4:	6923      	ldr	r3, [r4, #16]
 8002dc6:	6861      	ldr	r1, [r4, #4]
 8002dc8:	4299      	cmp	r1, r3
 8002dca:	bfde      	ittt	le
 8002dcc:	2330      	movle	r3, #48	; 0x30
 8002dce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002dd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002dd6:	1b52      	subs	r2, r2, r5
 8002dd8:	6122      	str	r2, [r4, #16]
 8002dda:	464b      	mov	r3, r9
 8002ddc:	4621      	mov	r1, r4
 8002dde:	4640      	mov	r0, r8
 8002de0:	f8cd a000 	str.w	sl, [sp]
 8002de4:	aa03      	add	r2, sp, #12
 8002de6:	f7ff fedf 	bl	8002ba8 <_printf_common>
 8002dea:	3001      	adds	r0, #1
 8002dec:	d14c      	bne.n	8002e88 <_printf_i+0x200>
 8002dee:	f04f 30ff 	mov.w	r0, #4294967295
 8002df2:	b004      	add	sp, #16
 8002df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002df8:	4834      	ldr	r0, [pc, #208]	; (8002ecc <_printf_i+0x244>)
 8002dfa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002dfe:	6829      	ldr	r1, [r5, #0]
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e06:	6029      	str	r1, [r5, #0]
 8002e08:	061d      	lsls	r5, r3, #24
 8002e0a:	d514      	bpl.n	8002e36 <_printf_i+0x1ae>
 8002e0c:	07df      	lsls	r7, r3, #31
 8002e0e:	bf44      	itt	mi
 8002e10:	f043 0320 	orrmi.w	r3, r3, #32
 8002e14:	6023      	strmi	r3, [r4, #0]
 8002e16:	b91e      	cbnz	r6, 8002e20 <_printf_i+0x198>
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	f023 0320 	bic.w	r3, r3, #32
 8002e1e:	6023      	str	r3, [r4, #0]
 8002e20:	2310      	movs	r3, #16
 8002e22:	e7af      	b.n	8002d84 <_printf_i+0xfc>
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	f043 0320 	orr.w	r3, r3, #32
 8002e2a:	6023      	str	r3, [r4, #0]
 8002e2c:	2378      	movs	r3, #120	; 0x78
 8002e2e:	4828      	ldr	r0, [pc, #160]	; (8002ed0 <_printf_i+0x248>)
 8002e30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e34:	e7e3      	b.n	8002dfe <_printf_i+0x176>
 8002e36:	0659      	lsls	r1, r3, #25
 8002e38:	bf48      	it	mi
 8002e3a:	b2b6      	uxthmi	r6, r6
 8002e3c:	e7e6      	b.n	8002e0c <_printf_i+0x184>
 8002e3e:	4615      	mov	r5, r2
 8002e40:	e7bb      	b.n	8002dba <_printf_i+0x132>
 8002e42:	682b      	ldr	r3, [r5, #0]
 8002e44:	6826      	ldr	r6, [r4, #0]
 8002e46:	1d18      	adds	r0, r3, #4
 8002e48:	6961      	ldr	r1, [r4, #20]
 8002e4a:	6028      	str	r0, [r5, #0]
 8002e4c:	0635      	lsls	r5, r6, #24
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	d501      	bpl.n	8002e56 <_printf_i+0x1ce>
 8002e52:	6019      	str	r1, [r3, #0]
 8002e54:	e002      	b.n	8002e5c <_printf_i+0x1d4>
 8002e56:	0670      	lsls	r0, r6, #25
 8002e58:	d5fb      	bpl.n	8002e52 <_printf_i+0x1ca>
 8002e5a:	8019      	strh	r1, [r3, #0]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	4615      	mov	r5, r2
 8002e60:	6123      	str	r3, [r4, #16]
 8002e62:	e7ba      	b.n	8002dda <_printf_i+0x152>
 8002e64:	682b      	ldr	r3, [r5, #0]
 8002e66:	2100      	movs	r1, #0
 8002e68:	1d1a      	adds	r2, r3, #4
 8002e6a:	602a      	str	r2, [r5, #0]
 8002e6c:	681d      	ldr	r5, [r3, #0]
 8002e6e:	6862      	ldr	r2, [r4, #4]
 8002e70:	4628      	mov	r0, r5
 8002e72:	f000 f82f 	bl	8002ed4 <memchr>
 8002e76:	b108      	cbz	r0, 8002e7c <_printf_i+0x1f4>
 8002e78:	1b40      	subs	r0, r0, r5
 8002e7a:	6060      	str	r0, [r4, #4]
 8002e7c:	6863      	ldr	r3, [r4, #4]
 8002e7e:	6123      	str	r3, [r4, #16]
 8002e80:	2300      	movs	r3, #0
 8002e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e86:	e7a8      	b.n	8002dda <_printf_i+0x152>
 8002e88:	462a      	mov	r2, r5
 8002e8a:	4649      	mov	r1, r9
 8002e8c:	4640      	mov	r0, r8
 8002e8e:	6923      	ldr	r3, [r4, #16]
 8002e90:	47d0      	blx	sl
 8002e92:	3001      	adds	r0, #1
 8002e94:	d0ab      	beq.n	8002dee <_printf_i+0x166>
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	079b      	lsls	r3, r3, #30
 8002e9a:	d413      	bmi.n	8002ec4 <_printf_i+0x23c>
 8002e9c:	68e0      	ldr	r0, [r4, #12]
 8002e9e:	9b03      	ldr	r3, [sp, #12]
 8002ea0:	4298      	cmp	r0, r3
 8002ea2:	bfb8      	it	lt
 8002ea4:	4618      	movlt	r0, r3
 8002ea6:	e7a4      	b.n	8002df2 <_printf_i+0x16a>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	4632      	mov	r2, r6
 8002eac:	4649      	mov	r1, r9
 8002eae:	4640      	mov	r0, r8
 8002eb0:	47d0      	blx	sl
 8002eb2:	3001      	adds	r0, #1
 8002eb4:	d09b      	beq.n	8002dee <_printf_i+0x166>
 8002eb6:	3501      	adds	r5, #1
 8002eb8:	68e3      	ldr	r3, [r4, #12]
 8002eba:	9903      	ldr	r1, [sp, #12]
 8002ebc:	1a5b      	subs	r3, r3, r1
 8002ebe:	42ab      	cmp	r3, r5
 8002ec0:	dcf2      	bgt.n	8002ea8 <_printf_i+0x220>
 8002ec2:	e7eb      	b.n	8002e9c <_printf_i+0x214>
 8002ec4:	2500      	movs	r5, #0
 8002ec6:	f104 0619 	add.w	r6, r4, #25
 8002eca:	e7f5      	b.n	8002eb8 <_printf_i+0x230>
 8002ecc:	080031fd 	.word	0x080031fd
 8002ed0:	0800320e 	.word	0x0800320e

08002ed4 <memchr>:
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	b510      	push	{r4, lr}
 8002ed8:	b2c9      	uxtb	r1, r1
 8002eda:	4402      	add	r2, r0
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	d101      	bne.n	8002ee6 <memchr+0x12>
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	e003      	b.n	8002eee <memchr+0x1a>
 8002ee6:	7804      	ldrb	r4, [r0, #0]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	428c      	cmp	r4, r1
 8002eec:	d1f6      	bne.n	8002edc <memchr+0x8>
 8002eee:	bd10      	pop	{r4, pc}

08002ef0 <memcpy>:
 8002ef0:	440a      	add	r2, r1
 8002ef2:	4291      	cmp	r1, r2
 8002ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ef8:	d100      	bne.n	8002efc <memcpy+0xc>
 8002efa:	4770      	bx	lr
 8002efc:	b510      	push	{r4, lr}
 8002efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f02:	4291      	cmp	r1, r2
 8002f04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f08:	d1f9      	bne.n	8002efe <memcpy+0xe>
 8002f0a:	bd10      	pop	{r4, pc}

08002f0c <memmove>:
 8002f0c:	4288      	cmp	r0, r1
 8002f0e:	b510      	push	{r4, lr}
 8002f10:	eb01 0402 	add.w	r4, r1, r2
 8002f14:	d902      	bls.n	8002f1c <memmove+0x10>
 8002f16:	4284      	cmp	r4, r0
 8002f18:	4623      	mov	r3, r4
 8002f1a:	d807      	bhi.n	8002f2c <memmove+0x20>
 8002f1c:	1e43      	subs	r3, r0, #1
 8002f1e:	42a1      	cmp	r1, r4
 8002f20:	d008      	beq.n	8002f34 <memmove+0x28>
 8002f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f2a:	e7f8      	b.n	8002f1e <memmove+0x12>
 8002f2c:	4601      	mov	r1, r0
 8002f2e:	4402      	add	r2, r0
 8002f30:	428a      	cmp	r2, r1
 8002f32:	d100      	bne.n	8002f36 <memmove+0x2a>
 8002f34:	bd10      	pop	{r4, pc}
 8002f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f3e:	e7f7      	b.n	8002f30 <memmove+0x24>

08002f40 <_free_r>:
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	4605      	mov	r5, r0
 8002f44:	2900      	cmp	r1, #0
 8002f46:	d040      	beq.n	8002fca <_free_r+0x8a>
 8002f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f4c:	1f0c      	subs	r4, r1, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bfb8      	it	lt
 8002f52:	18e4      	addlt	r4, r4, r3
 8002f54:	f000 f910 	bl	8003178 <__malloc_lock>
 8002f58:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <_free_r+0x8c>)
 8002f5a:	6813      	ldr	r3, [r2, #0]
 8002f5c:	b933      	cbnz	r3, 8002f6c <_free_r+0x2c>
 8002f5e:	6063      	str	r3, [r4, #4]
 8002f60:	6014      	str	r4, [r2, #0]
 8002f62:	4628      	mov	r0, r5
 8002f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f68:	f000 b90c 	b.w	8003184 <__malloc_unlock>
 8002f6c:	42a3      	cmp	r3, r4
 8002f6e:	d908      	bls.n	8002f82 <_free_r+0x42>
 8002f70:	6820      	ldr	r0, [r4, #0]
 8002f72:	1821      	adds	r1, r4, r0
 8002f74:	428b      	cmp	r3, r1
 8002f76:	bf01      	itttt	eq
 8002f78:	6819      	ldreq	r1, [r3, #0]
 8002f7a:	685b      	ldreq	r3, [r3, #4]
 8002f7c:	1809      	addeq	r1, r1, r0
 8002f7e:	6021      	streq	r1, [r4, #0]
 8002f80:	e7ed      	b.n	8002f5e <_free_r+0x1e>
 8002f82:	461a      	mov	r2, r3
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	b10b      	cbz	r3, 8002f8c <_free_r+0x4c>
 8002f88:	42a3      	cmp	r3, r4
 8002f8a:	d9fa      	bls.n	8002f82 <_free_r+0x42>
 8002f8c:	6811      	ldr	r1, [r2, #0]
 8002f8e:	1850      	adds	r0, r2, r1
 8002f90:	42a0      	cmp	r0, r4
 8002f92:	d10b      	bne.n	8002fac <_free_r+0x6c>
 8002f94:	6820      	ldr	r0, [r4, #0]
 8002f96:	4401      	add	r1, r0
 8002f98:	1850      	adds	r0, r2, r1
 8002f9a:	4283      	cmp	r3, r0
 8002f9c:	6011      	str	r1, [r2, #0]
 8002f9e:	d1e0      	bne.n	8002f62 <_free_r+0x22>
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4401      	add	r1, r0
 8002fa6:	6011      	str	r1, [r2, #0]
 8002fa8:	6053      	str	r3, [r2, #4]
 8002faa:	e7da      	b.n	8002f62 <_free_r+0x22>
 8002fac:	d902      	bls.n	8002fb4 <_free_r+0x74>
 8002fae:	230c      	movs	r3, #12
 8002fb0:	602b      	str	r3, [r5, #0]
 8002fb2:	e7d6      	b.n	8002f62 <_free_r+0x22>
 8002fb4:	6820      	ldr	r0, [r4, #0]
 8002fb6:	1821      	adds	r1, r4, r0
 8002fb8:	428b      	cmp	r3, r1
 8002fba:	bf01      	itttt	eq
 8002fbc:	6819      	ldreq	r1, [r3, #0]
 8002fbe:	685b      	ldreq	r3, [r3, #4]
 8002fc0:	1809      	addeq	r1, r1, r0
 8002fc2:	6021      	streq	r1, [r4, #0]
 8002fc4:	6063      	str	r3, [r4, #4]
 8002fc6:	6054      	str	r4, [r2, #4]
 8002fc8:	e7cb      	b.n	8002f62 <_free_r+0x22>
 8002fca:	bd38      	pop	{r3, r4, r5, pc}
 8002fcc:	20000188 	.word	0x20000188

08002fd0 <sbrk_aligned>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	4e0e      	ldr	r6, [pc, #56]	; (800300c <sbrk_aligned+0x3c>)
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	6831      	ldr	r1, [r6, #0]
 8002fd8:	4605      	mov	r5, r0
 8002fda:	b911      	cbnz	r1, 8002fe2 <sbrk_aligned+0x12>
 8002fdc:	f000 f8bc 	bl	8003158 <_sbrk_r>
 8002fe0:	6030      	str	r0, [r6, #0]
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	f000 f8b7 	bl	8003158 <_sbrk_r>
 8002fea:	1c43      	adds	r3, r0, #1
 8002fec:	d00a      	beq.n	8003004 <sbrk_aligned+0x34>
 8002fee:	1cc4      	adds	r4, r0, #3
 8002ff0:	f024 0403 	bic.w	r4, r4, #3
 8002ff4:	42a0      	cmp	r0, r4
 8002ff6:	d007      	beq.n	8003008 <sbrk_aligned+0x38>
 8002ff8:	1a21      	subs	r1, r4, r0
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	f000 f8ac 	bl	8003158 <_sbrk_r>
 8003000:	3001      	adds	r0, #1
 8003002:	d101      	bne.n	8003008 <sbrk_aligned+0x38>
 8003004:	f04f 34ff 	mov.w	r4, #4294967295
 8003008:	4620      	mov	r0, r4
 800300a:	bd70      	pop	{r4, r5, r6, pc}
 800300c:	2000018c 	.word	0x2000018c

08003010 <_malloc_r>:
 8003010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003014:	1ccd      	adds	r5, r1, #3
 8003016:	f025 0503 	bic.w	r5, r5, #3
 800301a:	3508      	adds	r5, #8
 800301c:	2d0c      	cmp	r5, #12
 800301e:	bf38      	it	cc
 8003020:	250c      	movcc	r5, #12
 8003022:	2d00      	cmp	r5, #0
 8003024:	4607      	mov	r7, r0
 8003026:	db01      	blt.n	800302c <_malloc_r+0x1c>
 8003028:	42a9      	cmp	r1, r5
 800302a:	d905      	bls.n	8003038 <_malloc_r+0x28>
 800302c:	230c      	movs	r3, #12
 800302e:	2600      	movs	r6, #0
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	4630      	mov	r0, r6
 8003034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003038:	4e2e      	ldr	r6, [pc, #184]	; (80030f4 <_malloc_r+0xe4>)
 800303a:	f000 f89d 	bl	8003178 <__malloc_lock>
 800303e:	6833      	ldr	r3, [r6, #0]
 8003040:	461c      	mov	r4, r3
 8003042:	bb34      	cbnz	r4, 8003092 <_malloc_r+0x82>
 8003044:	4629      	mov	r1, r5
 8003046:	4638      	mov	r0, r7
 8003048:	f7ff ffc2 	bl	8002fd0 <sbrk_aligned>
 800304c:	1c43      	adds	r3, r0, #1
 800304e:	4604      	mov	r4, r0
 8003050:	d14d      	bne.n	80030ee <_malloc_r+0xde>
 8003052:	6834      	ldr	r4, [r6, #0]
 8003054:	4626      	mov	r6, r4
 8003056:	2e00      	cmp	r6, #0
 8003058:	d140      	bne.n	80030dc <_malloc_r+0xcc>
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	4631      	mov	r1, r6
 800305e:	4638      	mov	r0, r7
 8003060:	eb04 0803 	add.w	r8, r4, r3
 8003064:	f000 f878 	bl	8003158 <_sbrk_r>
 8003068:	4580      	cmp	r8, r0
 800306a:	d13a      	bne.n	80030e2 <_malloc_r+0xd2>
 800306c:	6821      	ldr	r1, [r4, #0]
 800306e:	3503      	adds	r5, #3
 8003070:	1a6d      	subs	r5, r5, r1
 8003072:	f025 0503 	bic.w	r5, r5, #3
 8003076:	3508      	adds	r5, #8
 8003078:	2d0c      	cmp	r5, #12
 800307a:	bf38      	it	cc
 800307c:	250c      	movcc	r5, #12
 800307e:	4638      	mov	r0, r7
 8003080:	4629      	mov	r1, r5
 8003082:	f7ff ffa5 	bl	8002fd0 <sbrk_aligned>
 8003086:	3001      	adds	r0, #1
 8003088:	d02b      	beq.n	80030e2 <_malloc_r+0xd2>
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	442b      	add	r3, r5
 800308e:	6023      	str	r3, [r4, #0]
 8003090:	e00e      	b.n	80030b0 <_malloc_r+0xa0>
 8003092:	6822      	ldr	r2, [r4, #0]
 8003094:	1b52      	subs	r2, r2, r5
 8003096:	d41e      	bmi.n	80030d6 <_malloc_r+0xc6>
 8003098:	2a0b      	cmp	r2, #11
 800309a:	d916      	bls.n	80030ca <_malloc_r+0xba>
 800309c:	1961      	adds	r1, r4, r5
 800309e:	42a3      	cmp	r3, r4
 80030a0:	6025      	str	r5, [r4, #0]
 80030a2:	bf18      	it	ne
 80030a4:	6059      	strne	r1, [r3, #4]
 80030a6:	6863      	ldr	r3, [r4, #4]
 80030a8:	bf08      	it	eq
 80030aa:	6031      	streq	r1, [r6, #0]
 80030ac:	5162      	str	r2, [r4, r5]
 80030ae:	604b      	str	r3, [r1, #4]
 80030b0:	4638      	mov	r0, r7
 80030b2:	f104 060b 	add.w	r6, r4, #11
 80030b6:	f000 f865 	bl	8003184 <__malloc_unlock>
 80030ba:	f026 0607 	bic.w	r6, r6, #7
 80030be:	1d23      	adds	r3, r4, #4
 80030c0:	1af2      	subs	r2, r6, r3
 80030c2:	d0b6      	beq.n	8003032 <_malloc_r+0x22>
 80030c4:	1b9b      	subs	r3, r3, r6
 80030c6:	50a3      	str	r3, [r4, r2]
 80030c8:	e7b3      	b.n	8003032 <_malloc_r+0x22>
 80030ca:	6862      	ldr	r2, [r4, #4]
 80030cc:	42a3      	cmp	r3, r4
 80030ce:	bf0c      	ite	eq
 80030d0:	6032      	streq	r2, [r6, #0]
 80030d2:	605a      	strne	r2, [r3, #4]
 80030d4:	e7ec      	b.n	80030b0 <_malloc_r+0xa0>
 80030d6:	4623      	mov	r3, r4
 80030d8:	6864      	ldr	r4, [r4, #4]
 80030da:	e7b2      	b.n	8003042 <_malloc_r+0x32>
 80030dc:	4634      	mov	r4, r6
 80030de:	6876      	ldr	r6, [r6, #4]
 80030e0:	e7b9      	b.n	8003056 <_malloc_r+0x46>
 80030e2:	230c      	movs	r3, #12
 80030e4:	4638      	mov	r0, r7
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	f000 f84c 	bl	8003184 <__malloc_unlock>
 80030ec:	e7a1      	b.n	8003032 <_malloc_r+0x22>
 80030ee:	6025      	str	r5, [r4, #0]
 80030f0:	e7de      	b.n	80030b0 <_malloc_r+0xa0>
 80030f2:	bf00      	nop
 80030f4:	20000188 	.word	0x20000188

080030f8 <_realloc_r>:
 80030f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030fc:	4680      	mov	r8, r0
 80030fe:	4614      	mov	r4, r2
 8003100:	460e      	mov	r6, r1
 8003102:	b921      	cbnz	r1, 800310e <_realloc_r+0x16>
 8003104:	4611      	mov	r1, r2
 8003106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800310a:	f7ff bf81 	b.w	8003010 <_malloc_r>
 800310e:	b92a      	cbnz	r2, 800311c <_realloc_r+0x24>
 8003110:	f7ff ff16 	bl	8002f40 <_free_r>
 8003114:	4625      	mov	r5, r4
 8003116:	4628      	mov	r0, r5
 8003118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800311c:	f000 f838 	bl	8003190 <_malloc_usable_size_r>
 8003120:	4284      	cmp	r4, r0
 8003122:	4607      	mov	r7, r0
 8003124:	d802      	bhi.n	800312c <_realloc_r+0x34>
 8003126:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800312a:	d812      	bhi.n	8003152 <_realloc_r+0x5a>
 800312c:	4621      	mov	r1, r4
 800312e:	4640      	mov	r0, r8
 8003130:	f7ff ff6e 	bl	8003010 <_malloc_r>
 8003134:	4605      	mov	r5, r0
 8003136:	2800      	cmp	r0, #0
 8003138:	d0ed      	beq.n	8003116 <_realloc_r+0x1e>
 800313a:	42bc      	cmp	r4, r7
 800313c:	4622      	mov	r2, r4
 800313e:	4631      	mov	r1, r6
 8003140:	bf28      	it	cs
 8003142:	463a      	movcs	r2, r7
 8003144:	f7ff fed4 	bl	8002ef0 <memcpy>
 8003148:	4631      	mov	r1, r6
 800314a:	4640      	mov	r0, r8
 800314c:	f7ff fef8 	bl	8002f40 <_free_r>
 8003150:	e7e1      	b.n	8003116 <_realloc_r+0x1e>
 8003152:	4635      	mov	r5, r6
 8003154:	e7df      	b.n	8003116 <_realloc_r+0x1e>
	...

08003158 <_sbrk_r>:
 8003158:	b538      	push	{r3, r4, r5, lr}
 800315a:	2300      	movs	r3, #0
 800315c:	4d05      	ldr	r5, [pc, #20]	; (8003174 <_sbrk_r+0x1c>)
 800315e:	4604      	mov	r4, r0
 8003160:	4608      	mov	r0, r1
 8003162:	602b      	str	r3, [r5, #0]
 8003164:	f7fd fb1c 	bl	80007a0 <_sbrk>
 8003168:	1c43      	adds	r3, r0, #1
 800316a:	d102      	bne.n	8003172 <_sbrk_r+0x1a>
 800316c:	682b      	ldr	r3, [r5, #0]
 800316e:	b103      	cbz	r3, 8003172 <_sbrk_r+0x1a>
 8003170:	6023      	str	r3, [r4, #0]
 8003172:	bd38      	pop	{r3, r4, r5, pc}
 8003174:	20000190 	.word	0x20000190

08003178 <__malloc_lock>:
 8003178:	4801      	ldr	r0, [pc, #4]	; (8003180 <__malloc_lock+0x8>)
 800317a:	f000 b811 	b.w	80031a0 <__retarget_lock_acquire_recursive>
 800317e:	bf00      	nop
 8003180:	20000194 	.word	0x20000194

08003184 <__malloc_unlock>:
 8003184:	4801      	ldr	r0, [pc, #4]	; (800318c <__malloc_unlock+0x8>)
 8003186:	f000 b80c 	b.w	80031a2 <__retarget_lock_release_recursive>
 800318a:	bf00      	nop
 800318c:	20000194 	.word	0x20000194

08003190 <_malloc_usable_size_r>:
 8003190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003194:	1f18      	subs	r0, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	bfbc      	itt	lt
 800319a:	580b      	ldrlt	r3, [r1, r0]
 800319c:	18c0      	addlt	r0, r0, r3
 800319e:	4770      	bx	lr

080031a0 <__retarget_lock_acquire_recursive>:
 80031a0:	4770      	bx	lr

080031a2 <__retarget_lock_release_recursive>:
 80031a2:	4770      	bx	lr

080031a4 <_init>:
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a6:	bf00      	nop
 80031a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031aa:	bc08      	pop	{r3}
 80031ac:	469e      	mov	lr, r3
 80031ae:	4770      	bx	lr

080031b0 <_fini>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	bf00      	nop
 80031b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b6:	bc08      	pop	{r3}
 80031b8:	469e      	mov	lr, r3
 80031ba:	4770      	bx	lr
